# include ABCs
# import ABCs::Serializable
include ABCs2
import ABCs2::Serializable

class Tiny (field = "") < Serializable {
  has Hash serial_properties = Hash(
    :field => String
  )
}

class RawProps (p2 = Tiny(), p3 = Hash()) < Serializable {
  has Hash serial_properties = Hash(
    :p1 => String,
    :p2 => Tiny,
    :p3 => Hash,
  )
  has String p1 = "default p1"
}

class Accessors (String _prop1 = '', String _prop2 = '', Hash _prop_hash = Hash()) < Serializable {
  has Hash serial_properties = Hash(
    :prop1 => String,
    :prop2 => String,
    # this property is a raw hash
    :prop_hash => Hash,
  )

  -> prop1 () -> String { self._prop1 }
  -> prop2 () -> String { self._prop2 }
  -> prop_hash () -> Hash { self._prop_hash }

  -> prop1 (String x) { self._prop1 = x; self }
  -> prop2 (String x) { self._prop2 = x; self }
  -> prop_hash (Hash x) { self._prop_hash = x; self }
}

class TestSerial < Serializable {
  has Hash serial_properties = Hash(
    :a => String,
    :acc => Accessors,
    :rp => RawProps,
  )

  # builtin type, not serializable
  has String _a = ""
  # this serializable property uses setter accessors
  has Accessors _acc = Accessors()
  # this serializable property uses bare property assignment
  has RawProps _rp = RawProps()

  -> a () -> String { self._a }
  -> a (Str x) { self._a = x; self }

  -> acc () -> Accessors { self._acc }
  -> acc (Accessors a) { self._acc = a; self }

  -> rp () -> RawProps { self._rp }
  -> rp (RawProps r) { self._rp = r; self }
}

# const eval_scope = { eval(_) }

var ts = TestSerial()
ts.a("asd")
ts.acc( Accessors(_prop1: "abc", _prop2: "def", _prop_hash: Hash(1 => 2)) )
ts.rp( RawProps(p2: Tiny(field: "p2"), p3: Hash(:p => 3) ) )
var Hash s = ts.serialize
# say ts.dump
# say s
var new_ts = TestSerial().unserialize(s, ) # eval_scope: eval_scope)
say (s == new_ts.serialize) # ==> true

var J = "JSON::PP".require

var j = J.new.pretty # .convert_blessed

var json = j.encode(s)
# say json

var from_json = j.decode(json)

# say from_json

var roundtrip_ts = TestSerial().unserialize(from_json, ) #  eval_scope: eval_scope)

say (roundtrip_ts.dump==ts.dump)
