class Base {
  method init {
    self.properties.map{
      _().map_kv{
          |name, type|
        self{:_ + name} = type()+1
        __CLASS__.def_method(name, func (self) { self{:_ + name} } )
      }
    }
  }
}

define DATA_PROPS = [:create, :modify, :access]

class Data < Base {
  has Array properties = [ {
    DATA_PROPS.map{
      ( (_) => Num )
    }.to_h
  } ]
}

var d = Data()
say d.methods.keys
say d.methods.keys.grep{ _ ~~ /^(?:create|modify|access)$/ }
DATA_PROPS.each{ d.respond_to(_).say(': ', _) }
say d.access
