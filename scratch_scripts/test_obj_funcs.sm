include ABCs

class X {
  -> no_arg { }
  -> arg_1 (x) { x }

  -> _hidden_method {}

  has property
}
var i = X()

assert( i.declares_method(:property) )
assert( i.declares_method(:no_arg) )
assert( i.declares_method(:arg_1) )
assert( Object.declares_method(:compile_to_perl) )
assert( ! i.declares_method(:_hidden_method) )

assert( i.respond_to(:property) )
assert( i.respond_to(:no_arg) )
assert( i.respond_to(:arg_1) )
assert( i.respond_to(:_hidden_method) )
assert( ! Object.respond_to(:compile_to_perl) )
assert( ! i.respond_to(:non_existent__) )

assert( i.has_overload(:no_arg, give_msg: false) )
assert( i.has_overload(:_hidden_method, give_msg: false) )
assert( i.has_overload(:property, give_msg: false) )
assert( i.has_overload(:property, give_msg: false, 1) )
assert( i.has_overload(:property, give_msg: false, 1, 2) )
assert( i.has_overload(:property, give_msg: false, 1, 2, 3) )
assert( i.has_overload(:arg_1, give_msg: false, 1) )

assert( ! i.has_overload(:no_arg, give_msg: false, 1) )
assert( ! i.has_overload(:no_arg, give_msg: false, 1, 2) )
assert( ! i.has_overload(:_hidden_method, give_msg: false, 1) )
assert( ! i.has_overload(:_hidden_method, give_msg: false, 1) )
assert( ! i.has_overload(:arg_1, give_msg: false) )
assert( ! i.has_overload(:arg_1, give_msg: false, 1, 2) )

assert( i.has_public_concrete_method(:no_arg) )
assert( i.has_public_concrete_method(:arg_1) )
assert( i.has_public_concrete_method(:property) )
assert( ! i.has_public_concrete_method(:_hidden_method) )
assert( ! Object.has_public_concrete_method(:compile_to_perl) )

assert( i.has_public_concrete_overload(:no_arg) )
assert( i.has_public_concrete_overload(:arg_1, 1) )
assert( i.has_public_concrete_overload(:property, 1) )
assert( i.has_public_concrete_overload(:property, 1, 2) )
assert( ! i.has_public_concrete_overload(:no_arg, 1) )
assert( ! i.has_public_concrete_overload(:arg_1, 1, 2) )
assert( ! i.has_public_concrete_overload(:_hidden_method) )
assert( ! i.has_public_concrete_overload(:_hidden_method, 1) )
assert( ! i.has_public_concrete_overload(:_hidden_method, 1, 2) )

assert( i.is_property(:property, :arg) )
assert( ! i.is_property(:no_arg, :arg) )
assert( ! i.is_property(:arg_1, :arg) )
assert( ! i.is_property(:_hidden_method, :arg) )

assert( ABCs::is_baseclass(Object) )
assert( ABCs::is_baseclass(String) )
assert( ABCs::is_baseclass(X) )
assert( ! ABCs::is_baseclass(i) )
assert( ! ABCs::is_baseclass(1) )
assert( ! ABCs::is_baseclass("") )
assert( ! ABCs::is_baseclass(String()) )

assert( ABCs::is_fqco(i) )
assert( ABCs::is_fqco(i, extra_property: :property) )
assert( ABCs::is_fqco("i", extra_property: :len) )
assert( ABCs::is_fqco(String(), extra_property: :len) )
assert( ABCs::is_fqco(Object.new, extra_property: :methods) )
assert( ! ABCs::is_fqco(X, extra_property: :property) )
assert( ! ABCs::is_fqco(String, extra_property: :property) )
assert( ! ABCs::is_fqco(Object, extra_property: :property) )

assert( ! Object.new.serializable )
assert( ! String().serializable )
assert( ! Hash().serializable )

assert( ! ABCs::Serializable()._impl_is_serialized_hash(Hash) )
assert( ! ABCs::Serializable()._impl_is_serialized_hash(Hash()) )
assert( ! ABCs::Serializable()._impl_is_serialized_hash(Hash(1)) )
assert( ! ABCs::Serializable()._impl_is_serialized_hash(Hash(:_serial_type => "")) )
assert( ! ABCs::Serializable()._impl_is_serialized_hash(Hash(:_serial_type => String)) )
assert( ! ABCs::Serializable()._impl_is_serialized_hash(Hash(:_serial_value => "value")) )
assert( ! ABCs::Serializable()._impl_is_serialized_hash(Hash(:_serial_type => "", :_serial_value => "value")) )
assert( ! ABCs::Serializable()._impl_is_serialized_hash(Hash(:_serial_type => String, :_serial_value => "value")) )
assert( ! ABCs::Serializable()._impl_is_serialized_hash(Hash(:_serial_type => "", :_serial_value => Hash)) )
assert( ABCs::Serializable()._impl_is_serialized_hash(Hash(:_serial_type => String, :_serial_value => Hash())) )
assert( ABCs::Serializable()._impl_is_serialized_hash(Hash(:_serial_type => "String", :_serial_value => Hash())) )
