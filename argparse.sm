#! sidef -WkP8
# # https://unix.stackexchange.com/questions/484152/how-to-distinguish-between-a-positional-parameter-and-an-option

##  ArgParse, simple Python-like argument parsing for Sidef
##    Copyright Cat Stevens 2018
##  This program is free software: you can redistribute it and/or modify
##    it under the terms of the GNU General Public License as published by
##    the Free Software Foundation, either version 3 of the License, or
##    (at your option) any later version.
##
##    This program is distributed in the hope that it will be useful,
##    but WITHOUT ANY WARRANTY; without even the implied warranty of
##    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##    GNU General Public License for more details.
##
##    You should have received a copy of the GNU General Public License
##    along with this program.  If not, see <https://www.gnu.org/licenses/>.

class Array {
  method second { return self.item(1) }
  method third { return self.item(2) }
}

class String {
  method second { return self.char(1) }
  method third { return self.char(2) }
}

class ArgParse (argv: Array) {

  class Option (long, short, req, param, doc) {

    method string_parts {
      var (
        short_name = (self.short ? "-#{self.short}," : " "*3),
        param_name = (self.param ? "=<#{self.param.first}>" : nil),
        param_default = (self.param ? "default value: \'#{self.param.second}\'" : nil),
      )

      [short_name, "--#{self.long}#{param_name}", self.doc.split("\n")..., param_default]
    }

    method name { self.long }
  }

  class Arg (name, example_val, repeatable, doc) {

    method string_parts {
      var exval = "e.g. #{self.example_val}" if (self.example_val)

      ["", self.name + self.repeatable_str, self.doc.split("\n")..., exval]
    }
    method repeatable_str {
      self.repeatable ? "..." : ""
    }
  }

  # long option RE allows for --h so that these are caught
  # as illegal long options           ---V
  has const opt_long_re = /^--([^-][^:= ]*)[:= ]?(.*)$/
  has const opt_short_re = /^-([^-][^:= ]*)[:= ]?(.*)$/

  # mutable
  has String OPT_TERM = "--"
  has String ARG_TERM = "-"
  has String GLOB_ARG = "==="

  has String VER_NAME = Pair("version", "v")
  has String HELP_NAME = Pair("help", "h")

  has Number EXIT_ERROR = 2

  # line leading alignment when printing the help
  has String leading_alignment = "\t"
  # are unknown options ignored
  has Bool unknown_is_error = true
  # otherwise, goes to STDOUT
  has Bool help_on_stderr = true
  # return code for --help
  has Number help_exits_with   = 0
  # numeric short option names like -1
  # enabling this removes support for non-separated parameters to short options
  # NOTE: actually mostly unimplemented
  has Bool numeric_short_names = false
  has Hash prog_opts = Hash()
  has Hash prog_args = Hash()
  has Hash prog_info = Hash()

  method info (info_obj) {
    self.prog_info += info_obj
    self._option(self.HELP_NAME.first, self.HELP_NAME.second, d: "Show this help")
    self._option(self.VER_NAME.first, self.VER_NAME.second, d: "Print version and exit")
    self
  }

  method set_leading_alignment (Str s) {
    self.leading_alignment = s
    self
  }

  method _option (l, s = false, r = false, p = nil, d) {
    self.prog_opts\{l} = Option(l, s, r, p, d)
    self
  }

  # TODO: fixup -o FILE vs -o=FILE vs -oFILE etc for param
  # TODO: add --Wl,linker arg1, linker arg2
  # TODO: add ability to prevent re-specified option
  # TODO: allow exclusive options, which prevent / negate other options
  # TODO: positional options
  # TODO: missing support for positional, named arguments like in "git commit"
  # currently only supports nonpositional arguments that don't start with - or --
  # we have 2 kinds of object: option, arg
  # we need to split these into
  #   (named option, any-name option)
  #   (named positional arg, named arg, positional arg, non-named non-positional)
  method option (
    String long_name,
    String short_name = false,
    Pair required = false,
    Pair negate = false,
    Pair param = nil,
    String doc = long_name.tclc
  ) {
    die "option names can't start with - or --" \
      if ([long_name, short_name].any{ _ =~ /^-+/ })
    die "short name isn't: #{short_name}" if (short_name && short_name.len>1)
    die "long name isn't: #{long_name}" if (long_name.len == 1)
    # die "short name isn't a name: #{short_name}" if (short_name && ["-"].any{ _ == short_name })

    die "already registered option with long name #{long_name}" \
      if ( self.prog_opts.contains(long_name) )

    die "already registered option with short name #{short_name}" \
      if ( self.long_name_from_short(short_name) )

    die "parser configuration disallows numeric short names: #{short_name}" \
      if ( (! self.numeric_short_names) && short_name.is_numeric )

    negate && negate.flatten!.any { ! defined(_) } \
      && die "non-nil 'negate' must have non-nil values: #{negate}"

    param && param.flatten!.any { ! defined(_) } \
      && die "non-nil 'param' must have non-nil values: #{param}"

    die "empty string as parameter" if ( [long_name, short_name].contains("") )

    # parameterise this
    var (_help, _h, _ver, _v) = (self.HELP_NAME..., self.VER_NAME...)
    die "options '#{_help}' '#{_h}' '#{_ver}' '#{_v}' are reserved options: #{long_name} #{short_name}" \
      if ( [_help, _h, _ver, _v].contains_any(long_name, short_name) )

    die "can't use negatable option #{short_name}, because h is reserved for showing the help: #{short_name}" \
      if (negate && short_name==_h.uc)

    func required_negated (Bool negate_branch) {
      given (required) {
        when (Pair) { required[negate_branch] }
        when (Bool) { required }
        default { die "argument 'required': type mismatch" } }
    }

    if (negate) {
      var long_neg = "no-#{long_name}"
      var doc_neg = "#{negate.second} #{doc.lc}"
      doc = "[auto] #{negate.first} #{doc.lc}"
      var short_neg = short_name.uc
      self._option(long_neg, short_neg, required_negated(false), param, doc_neg)
    }
    self._option(long_name, short_name, required_negated(true), param, doc)
    self
  }

  method _arg (n, e = nil, r = false, d) {
    self.prog_args\{n} = Arg(n, e, r, d)
    self
  }

  # TODO: positional arguments
  method arg (String name, example_val = nil, Bool repeatable = false, String doc) {
    die "already registered argument or option with name #{name}" \
      if ( self.prog_args.contains(name) )
    die "empty name" if (name == "")

    var changed
    name =  if ( !repeatable && name=~/^([^.]+)\.\.\.$/) { |n| changed = true; n[0] }
            else { name }
    self._arg(name, example_val, repeatable || changed, doc)
  }

  method use_option_terminator (String doc = "") {
    self._option("", d: "End #{ self.prog_info\{:name} }'s argument list#{\"\n\"+doc if doc}")
    self
  }

  method use_stdin_file_arg (String doc = "") {
    self._arg(self.ARG_TERM, d: "Read standard input as though it were a file#{\"\n\"+doc if doc}")
    self
  }

  method use_arg_list_terminator (doc = "") {
    self._arg(self.GLOB_ARG, d: "Begin a list of arbitrary arguments#{\"\n\"+doc if doc}")
    self
  }

  -> ignore_unknowns { self.unknown_is_error = false; self }
  -> error_unknowns { self.unknown_is_error = true; self }

  -> use_numeric_short_names { self.numeric_short_names = true; self }
  -> no_numeric_short_names { self.numeric_short_names = false; self }

  # TODO: implement these
  -> help_exit_code (Number code) { self.help_exit = code; self }
  -> use_stderr_help { self.help_on_stderr = true; self }
  -> no_stderr_help { self.help_on_stderr = false; self }

  method long_name_from_short (name) {
    for k, v in self.prog_opts() {
      if (v.short == name) {
        return k
      }
    }
    nil
  }

  # just the usage line
  method usage_short () is cached -> String {
    var (
      opts = gather { for _, v in self.prog_opts.sort() { take(v.short) if (v.short) } }.join(""),
      args = gather { for _, v in self.prog_args.sort() { take("[#{v.name}#{v.repeatable_str}]") } }.join(" ")
    )

    "Usage: #{ self.prog_info(){:name} } [-#{opts}] #{args}"
  }

  method version_me () is cached {
    var (name, ver, doc) = self.prog_info\{:name, :version, :doc}
    "#{name} v#{ver}: #{doc}"
  }

  # entire help output
  method help_me {
    gather {

      # unfortunately, aligning the argument and option docs requires an all-at-once
      #   solution, which isn't this
      # this is like, really bad
      func quarks_to_formatted_lines (Hash qs) -> String {
        var (
          sorted_qs     = qs.sort{|a, b| a.lc <=> b.lc }.map{ _[1].string_parts },
          padding_size  = sorted_qs.map{ _[0] }.max.len,
          first_space   = 1,
          first_padding = 16
        )

        # TODO: make '-c,--clone' (no space) possible, currently it isn't even with first_space = 0
        gather {
          for quark in sorted_qs {
            var (first, second, doc_first, *rest) = quark...
            take("#{self.leading_alignment}%s%s%-*s%-*s%s".sprintf(
                # 4 is the magic length of a short option + a comma + 1
                # as if the rest of this isn't also magic
                first + (" " * (first.len - 4)),
                " " * first_space,
                first_padding, second, padding_size, doc_first
              )
            )
            # everything after the first doc line
            for line in rest {
              # say (first.len + first_space + first_padding + second.len + padding_size)
              take("#{self.leading_alignment}%s%-*s".sprintf(
                  " " * (first_space + first_padding + padding_size), padding_size, line
                )
              )
            }
          }
        }.join("\n")
      }
      take(self.usage_short)
      take(self.version_me)

      take("")
      take("Arguments")
      take(quarks_to_formatted_lines(self.prog_args))

      take("")
      take("Options")
      take(quarks_to_formatted_lines(self.prog_opts))

      take("")
      take("Config")

      take("#{self.leading_alignment}Unknown options are #{self.unknown_is_error ? \"an error\" : \"ignored\"}")
      take("#{self.leading_alignment}Help output is printed on STDERR")
      take("#{self.leading_alignment}Numeric short names like '-2' are #{self.numeric_short_names ? \"en\" : \"dis\"}abled")
      take("#{self.leading_alignment}Positional arguments and options are not currently supported")
      take("")
      take("#{self.leading_alignment}Mandatory arguments to long options are mandatory for short options too.")
    }.join("\n")
  }

  # do NOT continue when printing version
  method dospecial_version {
    say self.version_me
    Sys.exit(0)
  }

  # help goes to STDERR, exits with error, and does NOT continue
  method dospecial_help {
    STDERR.say(self.help_me)
    Sys.exit(self.EXIT_ERROR)
  }

  # in a future iteration there could be a method for calling user-defined functions
  # rather than just returning the found arguments like ArgParse
  method go {
    var (
      reading_opts = true,
      got_stdin = false,
      in_opts = Hash(),
      in_args = Hash(),
      glob_args = []
    )

    # TODO: need to auto-fill the defaults
    # for non-provided options with default values
    # (could do that right here)

    -> unknown_option (String length, Number nr, String name, Number short_pos = 0, String short_char = "") {
      name = if ( [short_pos, short_char].any{ _ } ) {
        "char \##{short_pos}: '#{short_char}'"
      } else {
        "'#{name}'"
      }
      var (
        lead = "[#{ self.unknown_is_error ? \"ERROR\" : \"INFO\" }]",
        err = "#{lead} ArgParse: don't know #{length} option (\##{nr}): #{name}"
      )

      if (self.unknown_is_error) {
        die "#{err}"
      } else {
        STDERR.say("#{err}")
        STDERR.say("#{lead}  \t[Now continuing due to backward compatibility and excessive paranoia.]")
      }
    }

    -> unknown_argument (String name, Number nr) {
      STDERR.say(
        "[INFO] ArgParse: too many non-option arguments (want exactly #{self.prog_args.len}) (\##{nr}): #{name}"
      )
      STDERR.say("[INFO]  \t[Now continuing due to backward compatibility and excessive paranoia.]")
    }

    for current_index, param in self.argv.zip_indices() {
      # special option checks
      if ( (param == self.OPT_TERM) && defined(self.prog_opts\{""}) ) {
        reading_opts = false
        next
      } elsif ( (param == self.ARG_TERM) && defined(self.prog_args\{self.ARG_TERM}) ) {
        got_stdin = true
        next
      } elsif ( (param == self.GLOB_ARG) && defined(self.prog_args\{self.GLOB_ARG}) ) {
        # take the rest of the arguments and stash them as an array
        glob_args.append(self.argv[ current_index .. self.argv.last_index ])
        break
      }

      # ok, read an option
      # note that this regex excludes the - STDIN file argument
      if (reading_opts && (param ~~ /^-.+/) ) {
        # long options
        # -- as a terminator was already handled above
        if (param =~ self.opt_long_re) {
            |param_parts|

          var (opt_name, value) = param_parts[0, 1]

          # make these actions more configurable

          # do NOT continue when printing version
          if ( opt_name == self.VER_NAME.first ) {
            self.dospecial_version
          # help goes to STDERR, exits with error, and does NOT continue
          } elsif ( opt_name == self.HELP_NAME.first ) {
            self.dospecial_help
          # we don't know any argument by that name
          } elsif ( ! defined(self.prog_opts\{opt_name}) ) {
            unknown_option(:long, current_index + 1, opt_name)
            next
          }

          # rest of long option processing
          # handle parameters here

          in_opts += Pair(opt_name, value ? value : true)

        # short options
        } elsif (param =~ self.opt_short_re) {
            |param_parts|

          var (opts, value) = param_parts[0, 1]

          if ( opts == self.VER_NAME.second ) {
            self.dospecial_version
          } elsif ( opts == self.HELP_NAME.second ) {
            self.dospecial_help
          }

          # unpack the list of short options
          for opt_index, short_opt in opts.chars.zip_indices() {

            # might also find -v / -h here, cover that case
            # loop is exited if these pass
            if ( short_opt == self.VER_NAME.second ) {
              self.dospecial_version
            } elsif ( short_opt == self.HELP_NAME.second ) {
              self.dospecial_help
            }

            var long_name_of = self.long_name_from_short(short_opt) # prog_opts().grep_val{ .short == short_opt }

            # we don't know any argument by that name
            if ( ! long_name_of ) {
              unknown_option(:short, current_index + 1, opts, short_pos: opt_index, short_char: short_opt)
              next

            # allow -WkP12 and -WkP12t when short option names are not numeric
            } elsif ( self.numeric_short_names && short_opt.is_numeric ) {

              # parse backwards and forwards to find the last non-nr and the end of the current nr
              opts[-(opt_index-1) .. 0] # reversed previous section of the opt
              opts[opt_index+1 .. @opts->last_index] # next section of the opt
              in_opts += Pair(long_name_of, 12)

            } else {
              # remember to use value if the current char is the last one
              # so that -WkP=12 etc works
              in_opts += Pair(
                long_name_of,
                opt_index==(@opts).last_index && value
                  ? value
                  : true
              )
            }

          }

          # not necessary here, we already did each part
          # in_opts += opts.:value
        } else {

        }
      } else {
        var expect_no_args = self.prog_args.is_empty
        # unexpected arguments are filtered out, the point is to only give the wanted data
        if (
            expect_no_args \ # if we wanted 0 but got N
            || (in_args.len >= self.prog_args.len) \ # if we already have the expected ones
            || (! self.prog_args.grep_val{ .repeatable }) # but not if we wanted infinite arguments
        ) {
          unknown_argument(param, current_index + 1)
          next
        }

        in_args += param.:true
      }
    }

    # NOTE:
    # MISSING: combined short options (needs re-processing)
    # MISSING: context for options with parameters with space delimeters
    # MISSING: parameter support in combined short options

    [in_opts, in_args, glob_args]
  }
}

func test {
  var parser = ArgParse(ARGV) \
    .info(:(name => "argparse", version => "1", doc => "argparse test")) \
    .option("force", "f", doc: "Force a rebuild in any case") \
    .option("dry-run", "n", doc: "Print configuration; commit no changes") \
    .option("clean", "c", negate: "Always":"Never", doc: "'make clean'") \
    .option("sums", "s",  negate: "Always":"Never", doc: "use checksums") \
    .option("db", "d", param: "file":".multi", doc: "Use this database instead") \
    .use_option_terminator("Further arguments are given to Factor") \
    .use_stdin_file_arg \
    .use_arg_list_terminator \
    # .ignore_unknowns \
    .arg("args", doc: "Arguments to the final Factor VM")

  say parser.help_me

  say parser.go
}

if (__FILE__ == __MAIN__) {
  test()
}
