# }
#
# # todo: make it actually caching
# class CacheDB (File db_base = nil, Dir db_dir = nil, Bool dry_run = nil) < lib::withdirectory::CapturedWriter {
#
#   has Array change_sequence
#   has Hash orig_data
#   has Hash data
#   has GuardIO::SLog log
#
#   -> db_name { self.db_dir + self.db_base }
#   -> wd { self.db_dir }
#
#   method setup (Bool verbose = false, Bool replace_existing = false) {
#     self.log = GuardIO::SLog(is_verbose: verbose)
#     if (self.db_name.exists && replace_existing) {
#       self.log.wrn(__FILE__, __LINE__, __METHOD_NAME__, "!!! removing old DB !!!")
#       self.db_name.cleave({ .remove }, { .touch })
#     }
#     if (! self.db_name.exists) { self.db_name.touch }
#
#     self
#   }
#
#   method destroy {
#     self.log.wrn(__FILE__, __LINE__, __METHOD_NAME__, 'shutting down!!!')
#     self._write_disk_db
#   }
#
#   method _write_disk_db {
#     const MN = __METHOD_NAME__
#     self.log.trc(__FILE__, __LINE__, MN, 'writing', self.db_name)
#     if ( new_data ) {
#       self.capture_write_disk(MN, { CacheDBStateless::_write_disk_db(self.db_base, self.data) } ) #, __METHOD_NAME__ )
#     } else {
#       # *(self.parent_obj) -> cleanup
#       die "[ERROR]\t#{__METHOD_NAME__}: garbage argument #{new_data}"
#     }
#   }
#
#   method _read_disk_db () is cached -> Hash {
#     self.log.trc(__FILE__, __LINE__, __METHOD_NAME__, 'reading', self.db_name)
#
#     self.with_directory{ CacheDBStateless::_read_disk_db(self.db_base) }
#   }
#
#   method load () is cached -> Hash {
#     self.log.vbs(__FILE__, __LINE__, __METHOD_NAME__, 'loading db...')
#     static const db_data
#     if (! defined(db_data)) {
#       self.log.vbs(__FILE__, __LINE__, __METHOD_NAME__, 'wasn\'t cached!')
#       db_data = self.read_disk_db
#     }
#     db_data
#
#   }
  # TODO: don't write the disk right away
  # method insert (Object new_entry) {
  #   self.log.trc(__FILE__, __LINE__, __METHOD_NAME__, 'inserting', new_entry)
  #   const entire_db = self.load
  #   entire_db{new_entry.id} = new_entry
  #   self.write_disk_db( entire_db )
  # }
#
  # method delete (Object key) {
  #   self.log.trc(__FILE__, __LINE__, __METHOD_NAME__, 'removing id \'', key, "'")
  #   const entire_db = self.load
  #   entire_db.delete(key)
  #   self.write_disk_db( entire_db )
  # }
