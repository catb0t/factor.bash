#! ruby

{}(); {}()

class A ( a, b, c ) { method == (o) { self.a==o.a && self.b==o.b && self.c==o.c }}

func branch (_) -> Hash {
  .is_a(Set) ? .values.map{ (_, A(1 2 3)) }.to_h : :(_ A(1 2 3))
}

func linear (_) -> Hash {
  .to_set.values.map{ (_, A(1 2 3)) }.to_h
}

func micro () -> Num { Time().micro * 100_000 }

assert_eq(1 1)

5.times{
  const st1 = micro()
  100_000.times{
    assert_eq(:(:a, A(1 2 3)), branch( .is_even ? :a : Set(:a)))
  }
  const e1 = micro()-st1
  say "e1: #{e1}"

  assert_eq(1 1)

  # about a tenth of a second faster in total
  const st2 = micro()
  100_000.times{
    assert_eq(:(:a, A(1 2 3)), linear( .is_even ? :a : Set(:a)))
  }
  const e2 = micro()-st2
  say "e2: #{e2}"

  const st3 = micro()
  100_000.times{
    assert_eq(:(:a, A(1 2 3)), branch( Set(:a) ) )
  }
  const e3 = micro()-st3
  say "e3: #{e3}"

  const st4 = micro()
  100_000.times{
    assert_eq(:(:a, A(1 2 3)), linear( Set(:a) ) )
  }
  const e4 = micro()-st4
  say "e4: #{e4}"
}
