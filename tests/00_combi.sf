#! /usr/bin/ruby
include sidefext::combi

-> A((0), n) { n + 1 }
-> A(m, (0)) { A(m - 1, 1) }
-> A(m,  n)  { A(m-1, A(m, n-1)) }

Combi::apply( )(
  { assert_eq( 0, Combi::binop(1, 2)('&') ) },
  { assert_eq( [61, 125], Combi::applyf( ([3, 3], [3, 4]) )( { A(_...) }, { A(_...) } ) ) },
  { assert_eq( [3, 7], Combi::binop_pairs(1, 2, 3, 4)('+') ) },  # '
  { assert_eq( [3, 12], Combi::binop_pairs(1, 2, 3, 4)('+', '*') ) }, # '
  { assert_eq( [3, 12, 11], Combi::binop_pairs(1, 2, 3, 4, 5, 6)('+', '*') ) } # '
  { assert_eq( [3, 12, 11, 0], Combi::binop_pairs(1, 2, 3, 4, 5, 6, 7)('+', '*') ) } # '
  { assert_eq( [Pair(1, 2), Pair(3, 4), Pair(5, 6), Pair(7, 0)], Combi::binop_pairs(1, 2, 3, 4, 5, 6, 7)(Pair) ) }
)

class A {

  has Bool exc_destructor_ran = false
  has Bool normal_destructor_ran = false

  method be_ok { say __CLASS_NAME__+': i feel ok...'; :be_ok_return }

  method be_die { say __CLASS_NAME__+': i feel sick...'; die 'i am dead'; :be_die_return }

  method destroy_exc (Bool is_exc, Hash exc_info, *rest) {
    self.exc_destructor_ran = true
    say "#{__CLASS_NAME__}: exception destructor called: '#{exc_info{:type}}' '#{exc_info{:msg}}'; #{rest}"
    assert(is_exc)
    :destroy_exc_return
  }
  method destroy_normal (Bool is_exc, Hash exc_info, *rest) {
    self.normal_destructor_ran = true
    say "#{__CLASS_NAME__}: normal destructor called: '#{exc_info{:type}}'; #{rest}"
    assert(!is_exc)
    :destroy_normal_return
  }
}

say 'TEST: don\t call any destructors because no exception occurs and they are not run in normal operation'# '
3.times{
  var a = A()
  var block_ran = false

  const s1 = Combi::FinalizerSpec(
    obj: a, ok_f7rs: [[:destroy_normal]], exc_f7rs: [[:destroy_exc]], exc_only: true
  )

  const f1 = Combi::with_finalizers(s1)({
    say 'call nothing'
    block_ran = true
    .be_ok
    :block_return
  })
  # say "\n\tNOTE: run finished, starting diagnostics\n"
  # say Combi::_indent_by(Combi::dump(f1), ' ' * 4)
  assert_eq(block_ran, true)
  assert_eq(a.normal_destructor_ran, false)
  assert_eq(a.exc_destructor_ran, false)
  assert_eq(f1.success, true)
  assert_eq(f1.blocks_ret, [ [:block_return] ])

  assert_eq(f1.f7r_ret.ok, [])
  assert_eq(f1.f7r_ret.exc, [])
  assert_eq(f1.f7r_ret.shared, [])

  assert_eq(f1.exc_info, :(type => 'The operation completed successfully.', msg => '') )
}

say 'TEST: shared'# '
3.times{
  var a = A()
  var block_ran = false

  const s1 = Combi::FinalizerSpec(
    obj: a, shared_f7rs: [[:destroy_normal]], exc_only: false
  )

  const f1 = Combi::with_finalizers(s1)({
    say 'call nothing'
    block_ran = true
    .be_ok
    :block_return
  })
  # say "\n\tNOTE: run finished, starting diagnostics\n"
  # say Combi::_indent_by(Combi::dump(f1), ' ' * 4)
  assert_eq(block_ran, true)
  assert_eq(a.normal_destructor_ran, true)
  assert_eq(a.exc_destructor_ran, false)
  assert_eq(f1.success, true)
  assert_eq(f1.blocks_ret, [ [:block_return] ])

  assert_eq(f1.f7r_ret.ok, [])
  assert_eq(f1.f7r_ret.exc, [])
  assert_eq(f1.f7r_ret.shared, [ [:destroy_normal_return] ])

  assert_eq(f1.exc_info, :(type => 'The operation completed successfully.', msg => '') )
}

say 'normal operation with normal destructors called, and no shared' # '
3.times{
  var a = A()
  var block_ran = false

  const s1 = Combi::FinalizerSpec(
    obj: a, ok_f7rs: [[:destroy_normal]], exc_f7rs: [[:destroy_exc]], exc_only: false
  )

  const f1 = Combi::with_finalizers(s1)({
    say 'call normal dtors'
    block_ran = true
    .be_ok
    :block_return
  })
  # say "\n\tNOTE: run finished, starting diagnostics\n"

  # say Combi::_indent_by(Combi::dump(f1), ' ' * 4)
  assert_eq(block_ran, true)
  assert_eq(a.normal_destructor_ran, true)
  assert_eq(a.exc_destructor_ran, false)
  assert_eq(f1.success, true)
  assert_eq(f1.blocks_ret, [ [:block_return] ])

  assert_eq(f1.f7r_ret.ok, [[:destroy_normal_return]])
  assert_eq(f1.f7r_ret.exc, [])
  assert_eq(f1.f7r_ret.shared, [])

  assert_eq(f1.exc_info, :(type => 'The operation completed successfully.', msg => '') )
}

say "TEST abnormal operation with exception destructors called" # "
3.times{
  var a = A()
  var block_ran = false

  const s2 = Combi::FinalizerSpec(
    obj: a, ok_f7rs: [[:destroy_normal]], exc_f7rs: [[:destroy_exc]]
  )
  const f2 = Combi::with_finalizers(s2)({
    say 'call exc dtors'
    block_ran = true
    .be_die
    :block_return
  })
  # say "\n\tNOTE: run finished, starting diagnostics\n"
  # say Combi::_indent_by(Combi::dump(f2), ' ' * 4)
  assert_eq(block_ran, true)
  assert_eq(a.normal_destructor_ran, false)
  assert_eq(a.exc_destructor_ran, true)
  assert_eq(f2.success, false)
  assert_eq(f2.blocks_ret, [ ] )

  assert_eq(f2.f7r_ret.ok, [])
  assert_eq(f2.f7r_ret.exc, [[:destroy_exc_return]])
  assert_eq(f2.f7r_ret.shared, [])

  assert_eq(f2.exc_info(){:type}, :error)
  assert(/i am dead/ ~~ f2.exc_info(){:msg} )
}

Combi::rescope( true, :was_true )({
    |_, v|
  assert( .&& v )
})

Combi::first( 2, 1 )({
  assert_eq(_, 1)
})

Combi::second( 2, 1 )({
  assert_eq(_, 2)
})

Combi::rescope( false, nil )({
    |_, v|
  assert( .|| !defined(v) )
})

func multi (c) {
  c ? (true, @| c*2) : (false, nil)
}

Combi::rescope( multi([1, 2]) )({
    |*_|
  assert_eq( _, [true, 1, 2, 1, 2] )
})

Combi::rescope( multi([]) )({
    |*_|
  assert_eq(_, [false, nil])
})

say "\n*** Combi tests passed! "
