include lib::ABCs
import lib::ABCs::Serializable

include lib::frext

class X {
  -> no_arg { }
  -> arg_1 (x) { x }

  -> _hidden_method {}

  has property
}
var i = X()

assert_eq( X.grep_methods{ _ ~~ /arg/ }.keys.sort, [ :arg_1, :no_arg ] )
assert_eq( X.grep_methods{ _ ~~ /arg/ }.keys.sort, [ :arg_1, :no_arg ] )
assert_eq( X.grep_methods{ _ ~~ /arg/ }.keys.sort, [ :arg_1, :no_arg ] )
assert_eq( X.grep_sorted_methods({ _ ~~ /arg/ }, { |l, r| l <=> r }).map{ .key }, [ :arg_1, :no_arg ] )
assert_eq( X.grep_sorted_methods({ _ ~~ /arg/ }, { |l, r| l <=> r }).map{ .key }, [ :arg_1, :no_arg ] )
assert_eq( X.grep_sorted_methods({ _ ~~ /arg/ }, { |l, r| l <=> r }).map{ .key }, [ :arg_1, :no_arg ] )

assert( i.declares_method(:property) )
assert( i.declares_method(:no_arg) )
assert( i.declares_method(:arg_1) )
assert( Object.new.declares_method(:new) )
assert( ! i.declares_method(:_hidden_method) )

assert( i.respond_to(:property) )
assert( i.respond_to(:no_arg) )
assert( i.respond_to(:arg_1) )
assert( i.respond_to(:_hidden_method) )
assert( ! Object.respond_to(:compile_to_perl) )
assert( ! i.respond_to(:non_existent__) )

assert( i.has_overload( :( :callers => [:test], :name => :no_arg) ){:state} )
assert( i.has_overload( :( :callers => [:test], :name => :_hidden_method) ){:state} )
assert( i.has_overload( :( :callers => [:test], :name => :property) ){:state} )
assert( i.has_overload( :( :callers => [:test], :name => :property, :args => [1] ) ){:state} )
assert( i.has_overload( :( :callers => [:test], :name => :property, :args => [1, 2]) ){:state} )
assert( i.has_overload( :( :callers => [:test], :name => :property, :args => [1, 2, 3]) ){:state} )
assert( i.has_overload( :( :callers => [:test], :name => :arg_1,    :args => [1] ) ){:state} )

assert( ! i.has_overload( :( :callers => [:test1], :name => :no_arg, :args => [1]) ){:state} )
assert( ! i.has_overload( :( :callers => [:test1], :name => :no_arg, :args => [1, 2]) ){:state} )
assert( ! i.has_overload( :( :callers => [:test1], :name => :_hidden_method, :args => [1]) ){:state} )
assert( ! i.has_overload( :( :callers => [:test1], :name => :_hidden_method, :args => [1]) ){:state} )
assert( ! i.has_overload( :( :callers => [:test1], :name => :arg_1) ){:state} )
assert( ! i.has_overload( :( :callers => [:test1], :name => :arg_1, :args => [1, 2]) ){:state} )

assert( i.has_public_concrete_method(:test2, :no_arg) )
assert( i.has_public_concrete_method(:test2, :arg_1) )
assert( i.has_public_concrete_method(:test2, :property) )
assert( ! i.has_public_concrete_method(:test2, :_hidden_method) )
assert( ! Object.has_public_concrete_method(:test2, :compile_to_perl) )

assert( i.has_public_concrete_overload(:test3, :no_arg) )
assert( i.has_public_concrete_overload(:test3, :arg_1, 1) )
assert( i.has_public_concrete_overload(:test3, :property, 1) )
assert( i.has_public_concrete_overload(:test3, :property, 1, 2) )
assert( ! i.has_public_concrete_overload(:test3, :no_arg, 1) )
assert( ! i.has_public_concrete_overload(:test3, :arg_1, 1, 2) )
assert( ! i.has_public_concrete_overload(:test3, :_hidden_method) )
assert( ! i.has_public_concrete_overload(:test3, :_hidden_method, 1) )
assert( ! i.has_public_concrete_overload(:test3, :_hidden_method, 1, 2) )

assert( i.is_property(:test4, :property, :arg) )
assert( ! i.is_property(:test4, :_property, :arg) )
assert( ! i.is_property(:test4, :NOTHING, :arg) )
assert( ! i.is_property(:test4, :no_arg, :arg) )
assert( ! i.is_property(:test4, :arg_1, :arg) )
assert( ! i.is_property(:test4, :_hidden_method, :arg) )

assert( Object.is_typename )
assert( String.is_typename )
assert( X.is_typename )
assert( ! i.is_typename )
assert( ! 1.is_typename )
assert( ! "".is_typename )
assert( ! String().is_typename )

assert( i )
assert( i.is_object )
assert( "i".is_object )
assert( String().is_object )
assert( Object.new.is_object )
assert( ! X.is_object )
assert( ! String.is_object )
assert( ! Object.is_object )

assert( ! ::is_serializable( Object.new ) )
assert( ! ::is_serializable( String() ) )
assert( ! ::is_serializable( Hash() ) )

assert( ! Serializable()._is_serialized_obj(Hash) )
assert( ! Serializable()._is_serialized_obj(Hash()) )
assert( ! Serializable()._is_serialized_obj(Hash(1)) )

assert( ! Serializable()._is_serialized_obj(Hash(:_serial_type => ""), optimized: true) )
assert( ! Serializable()._is_serialized_obj(Hash(:_serial_type => String), optimized: true) )
assert( ! Serializable()._is_serialized_obj(Hash(:_serial_value => "value"), optimized: true) )
assert( ! Serializable()._is_serialized_obj(Hash(:_serial_value => Hash), optimized: true) )
assert( ! Serializable()._is_serialized_obj(Hash(:_serial_type => "", :_serial_value => "value"), optimized: true) )
assert( ! Serializable()._is_serialized_obj(Hash(:_serial_type => String, :_serial_value => "value"), optimized: true) )
assert( ! Serializable()._is_serialized_obj(Hash(:_serial_type => "", :_serial_value => Hash), optimized: true) )
# the following two are different when optimizing
assert( Serializable()._is_serialized_obj(Hash(:_serial_type => String, :_serial_value => Hash()), optimized: true) )
assert( Serializable()._is_serialized_obj(Hash(:_serial_type => "String", :_serial_value => Hash()), optimized: true) )
assert(   Serializable()._is_serialized_obj(Hash( :_serial_value => Hash() ) , optimized: true) )

assert( ! Serializable()._is_serialized_obj(Hash(:_serial_type => ""), optimized: false))
assert( ! Serializable()._is_serialized_obj(Hash(:_serial_type => String), optimized: false))
assert( ! Serializable()._is_serialized_obj(Hash(:_serial_value => "value"), optimized: false))
assert( ! Serializable()._is_serialized_obj(Hash(:_serial_value => Hash), optimized: false))
assert( ! Serializable()._is_serialized_obj(Hash(:_serial_type => "", :_serial_value => "value"), optimized: false))
assert( ! Serializable()._is_serialized_obj(Hash(:_serial_type => String, :_serial_value => "value"), optimized: false))
assert( ! Serializable()._is_serialized_obj(Hash(:_serial_type => "", :_serial_value => Hash), optimized: false))
if (__OPTIMIZED__) {
  assert( Serializable()._is_serialized_obj(Hash(:_serial_type => String, :_serial_value => Hash()), optimized: false))
  assert( Serializable()._is_serialized_obj(Hash(:_serial_type => "String", :_serial_value => Hash()), optimized: false))
} else {
  assert( ! Serializable()._is_serialized_obj(Hash(:_serial_type => String, :_serial_value => Hash()), optimized: false))
  assert( ! Serializable()._is_serialized_obj(Hash(:_serial_type => "String", :_serial_value => Hash()), optimized: false))
}
assert(   Serializable()._is_serialized_obj(Hash( :_serial_value => Hash() ) , optimized: false))
