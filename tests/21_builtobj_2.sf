#! ruby
include lib::ABCs
include lib::shell_words
import lib::shell_words::BuildSh
# import ABCs2::TypeUtils
include providers::builtobj
import builtobj::BuiltObj
import builtobj::BlobSums

assert(BuiltObj().is_serializable)

var bo = BuiltObj().id(:1).factor_version('0.99').is_git(true).git_branch(:master).git_hash(:2349876234).word_size(:64)
say "id: #{bo.id}"
# say ""
assert_eq(:sha256, bo.blob_algorithm)
assert_eq(:1, bo.id)
assert_eq(:64, bo.word_size)

var h = bo.serialize
# say h
var new_bo = BuiltObj().unserialize(h)
assert_eq(bo, new_bo)
assert_eq(new_bo.serialize, h)

var bo2 = BuiltObj().id(:1234) # .vm_format([ '', :fvm_, BuildSh.platform_vm_ext ])
assert_eq("fvm_1234#{BuildSh.platform_vm_ext}", bo2.vm_fullname)
say "vm fullname: #{bo2.vm_fullname}"

# is this platform specific? 
assert_eq(:factor, bo2.vm_format.ordered_run_keys(:pfx_platform, :ext).join( :factor ) )

bo2.lock
try {
  bo2.id(:111111111111)
} catch {
    |_, msg|
  assert( msg.starts_with('attempt of write to locked _exported::BuiltObj object!') )
}
bo2.unlock
bo2.id(:asdasd)
