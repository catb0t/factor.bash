#! ruby

include sidefext::construct
include sidefext::metatype
include sidefext::combi

# i would include Enumerator but I don't think they actually are meaninfully constructable
# Match is not constructible so not listed
# Glob is iterable but can't be constructed with an iterable
define ITER_TYPES = Set(Array, String, Set, Bag, Matrix, Hash, Set, Pair, Range, RangeNum, RangeString)
define CONSTRUCT1 = { |_, v| _(v) }
func is_iterable_object (Object o) {
  o.is_object && ITER_TYPES.any{ o.is_a(_) }
}

func complex_typecheck (Object obj, Object basetp, cdids, subtps) -> (Bool, Object) { # /
  const Bool do_subtps = (is_iterable_object(obj) && subtps)
  obj.namedcleave(
    base => { .is_a(basetp) },
    cdid => (cdids ? { cdids.any{ |c| .is_a(c) } } : { true }),
    single_etype => ((do_subtps && subtps.has_key(:element_type)) ? { .all{ .is_a(subtps{:element_type}) } } : { true }),
    multi_etype => ((do_subtps && subtps.has_key(:element_types)) ? { .all{ subtps{:element_type}.any{ |t| .is_a(t) } } } : { true })
    # subset checks here
  ).rescope{
    if (.values.all) {
      (true, obj)
    } else {
      (false, die "complex typecheck failed! #{_}")
    }
  }
}

# func set_first_rest (Set s) -> (Object, Set) {
#   const f = s{s.keys[0]}
#   (f, (s - f))
# }

# class String {

  # method map_lines (Block block) -> Array {
  #   var Array collected = []
  #   const composed = Combi::compose([ { |*_| collected.concat!( _ ) }, block ])
  #   self.each_line( composed )
  #   collected
  # }

  # method grep_lines (Block block) -> Array { ... }
# }

# class Array {
#   method map_sample (Number len, Block block) { ... }
#   method map_join (Block block, Object joiner) { ... }
# }

class Hash {
  method run_keys (*ks) {
    self & ks -> map_kv{ |k, _| ((k) => .run(k)) }
  }

  method ordered_run_keys (*ks) {
    self & ks -> pairs.sort{
        |l, r|
      ks.index(l[0]) <=> ks.index(r[0]) # sort based on their indices in ks
    }.map{ .[1].run(.[0]) }
  }

  method change_extant_keys (Hash spec) {
    const Hash shared_keys = (self & spec).keys
    self{ shared_keys... } = shared_keys.map{
        |k|
      # this is v, k because it's more likely you only care about the v
      spec{k}.run( self{k}, k )
    }...
    self
  }

  # inverse of + / merge: only update keys that are already truthy in the LHS
  method clobber_existing_by (other) -> Hash {
    self.map_kv{
        |k, v|
      ((k) => if ( v && other.has_key(k) ) {
        other{k}.run(k, v)
      } else {
        v
      })
    }
  }

  # TODO:
  # method compile_template (Hash templ) -> Hash {
  #   (templ{:__compiled} == true) && return templ
  #   templ.map_kv{
  #
  #   }
  #   templ{:__compiled} = true
  #   templ
  # }

  method template_transform (Hash subject) -> Hash {
    func _do_ewise_construct ( Object typename, Object source ) {
      if (! defined(source)) {
        typename()
      } elsif (ITER_TYPES.exists(typename) && is_iterable_object(source) ) {
        # say "branch a #{source.dump}"
        typename( @|(source ~~ String ? source.chars : source) )
      } else {
        typename( source )
      }
    }

    func _do_attempt_cast (Object t, Object _, Block ewc) {
      sidefext::construct::maybe_init( ewc( t, _ ) )
    }

    func _templ_tform_single (String key, Hash spec, initial_value, Bool attempt_cast_default, Bool ewise_construct_default) {
      if ( spec{:deferred} ) {
        return \spec{:deferred}
      }
      if ( spec.has_key(:type) && !(spec{:type}.is_typename) ) {
        die "#{__FILE__}:#{__LINE__}:#{__METHOD_NAME__}: not a typename: '#{spec{:type}.dump}' (key: '#{key}')"
      }
      func (_) -> Object {
        const Bool attempt_cast     = (.{:attempt_cast} \\ attempt_cast_default)
        const Bool ewise_construct  = (.{:ewise_construct} \\ ewise_construct_default)
        # say "ewise contruct #{ewise_construct}"

        const val_choice1 = if (!defined(initial_value)) {
          (.{:required} && (!.{:default})) && die (
            "#{__FILE__}:#{__LINE__}: #{__METHOD_NAME__}: required value missing for key '#{key}': ",
            "want '#{.{:type}}' or any of '#{.{:types}}'; got 'nil' (spec provides no default)"
          )
          .{:default}
        } else {
          initial_value
        }

        const constructed = if (val_choice1.is_typename && !.{:literal_typename}) {
          sidefext::construct::maybe_init( val_choice1 )
        } else {
          val_choice1
        }

        const Block do_ewise_construct = (ewise_construct ? _do_ewise_construct : CONSTRUCT1 )
        const Block do_attempt_cast    = (attempt_cast && ( .has_key(:caster) ? .{:caster} : _do_attempt_cast ) )

        const done_constructing = {
            |match, re_ctd|
          if (match) {
            re_ctd
          } elsif (attempt_cast) {
            do_attempt_cast(spec{:type}, re_ctd, do_ewise_construct)
          } elsif (!attempt_cast) {
            die "type mismatch (2)"
          } else { die "???" }

          # we've created /something/, now we have to typecheck
        }( if (.haskey(:types) || .haskey(:subtype)) {
          complex_typecheck( constructed, .{:type}, .{:types}, .{:subtype})
        } elsif (constructed !~ .{:type}) {
          if (attempt_cast) {
            (true, do_attempt_cast(spec{:type}, constructed, do_ewise_construct))
          } else {
            (false, die (
              "#{__FILE__}:#{__LINE__}: #{__METHOD_NAME__}: #{__FUNC_NAME__}: type mismatch for '#{key}': ",
              "want '#{.{:type}}'; got '#{constructed.class}' ('#{constructed.dump}')"
            ))
          }
        } else { (true, constructed) } )

        (.{:converter} \\ Block.identity)(done_constructing)
      }(spec)
    }

    <<'EOS' # '
     Supported keys:
       (none)            (interpreted as a typename)
       :required         a boolean
                         defaults to false
       :type             a typename, used in conversions
       :types            an iterable of allowed types
       :subtype          a Hash
         :subset           (Sidef feature missing) value must fit this subset
         :subsets          ditto for many subsets
         :element_type     Hash value, Array/Set item type constraint (Array<Bool> &c)
         :element_types    ditto for multiple allowed
         :element_subset   (Sidef feature missing) elements match this subset
         :element_subsets  or these subsets
       :default          a value to be used in lieu of the actual value in `subject`
                           if unset and value is nil, it will construct :type
       :deferred         a block, allowing late binding on not-yet-existing scopes
       :literal_typename a boolean, default: false
                           this option allows literalizing typenames
                           when this typename is a value, it would usually be constructed
       :caster           a block called only if the value is not of the correct type
       :converter        a block called in any case, as the last step, after all other transformations
       :ewise_construct  a boolean, whether to detect constructions such as Set([]) obviously having
                           the intent Set([]...)
                         defaults to true
       :attempt_cast     a boolean, whether to immediately throw or cast on type mismatch
                         defaults to true
EOS

    const attempt_cast_o = true
    const ewise_construct_o = true
    const Block do_ewise_construct = (ewise_construct_o ? _do_ewise_construct : CONSTRUCT1)

    # say self.dump
    # say subject.dump
    # we're just going to drop keys that aren't in self
    self.map_kv{
        |k, self_v|
      const subj_v = subject{k}
      # say "k: #{k} subj_v: '#{subj_v}' self_v: '#{self_v}'"
      ((k) => given ( self_v ) {
        when ( nil ) { subj_v }

        case ( .is_typename ) {
          given (subj_v) {
              |sj|
            when (nil) { sidefext::construct::maybe_init( _ ) }
            when (self_v) { sj }
            default {
              # say "b2 subj_v: '#{subj_v}'"
              attempt_cast_o || die ( "#{__FILE__}:#{__LINE__}: #{__METHOD_NAME__}: type mismatch for '#{k}': ",
                      "want '#{_}'; got '#{subj_v.class}' ('#{subj_v.dump}')" )
              _do_attempt_cast(_, subj_v, do_ewise_construct)
            }
          }
        }
        # self_v is our spec for this key
        when (Hash) { _templ_tform_single(k, self_v, subj_v, attempt_cast_o, ewise_construct_o)  }

        default { die "don't know that spec value in subject: '#{with (subj_v) { subj_v.class } else { '(nil)' }}' (value: '#{subj_v}'; key: '#{k}'; typename: #{with (subj_v) { .is_typename } else { 'no (nil)' }})"}
      })
    }
  }
}

class ImmutableHash ( Hash _data = :(), *_unpacked_data) {
  method init {
    if (!self._data && self._unpacked_data) { self._data = self._unpacked_data.to_h }

    [:values, :item, :grep, :grep_kv, :item, :items, :map_kv, :dclone].each{
      assert( self._data.respond_to( _ ) )
      __CLASS__.def_method( _, func generated_forwarder (__CLASS__ _s, *args) {
        self._data.method( _ )( args... )
      } )
    }
  }
}
