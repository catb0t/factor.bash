#! ruby

##  Combi, Factor/Scheme-style higher-order combinators to patch missing
##    functionality in Sidef

##    Copyright Cat Stevens 2018
##  This program is free software: you can redistribute it and/or modify
##    it under the terms of the GNU General Public License as published by
##    the Free Software Foundation, either version 3 of the License, or
##    (at your option) any later version.
##
##    This program is distributed in the hope that it will be useful,
##    but WITHOUT ANY WARRANTY; without even the implied warranty of
##    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##    GNU General Public License for more details.
##
##    You should have received a copy of the GNU General Public License
##    along with this program.  If not, see <https://www.gnu.org/licenses/>.

module Combi {

  func ifte (obj, Block cond, Block then, Block els) {
    cond(obj) ? then(obj) : els(obj)
  }
  func ifte (Block cond, Block then, Block els) {
    const c = [cond()]
    if ( c.all ) { then(c...) } else { els(c...) }
  }
  # travelling in a fighter Combi(nators)
  # similar to with, but allows more arguments and doesn't care about definedness
  func rescope (*args) {
    # say "\trescope args: #{args.dump}"
    func _bind_rs (Block b) {
      b.run(@|args)
    }
  }

  func rescope_n (Num n, *args) {
    func _bind_rsn (Block b) {
      b.run( args[0..^n], args.slice(n) )
    }
  }

  # return only the top of the stack
  -> first (*a) { a.last }
  -> second (*a) { a.last(2).first }

  -> rescope_first (*a) { Combi::rescope_n(1, @|a) }
  -> drop (*a) { Combi::rescope( a[1..a.len-1] ) } # drops from the right (top of the stack)
  -> nip (*a) { Combi::rescope( a[0..a.len-2] ) }  # from the left

  -> drop_n (Number n, *a) { Combi::rescope( a[n..a.len-1] ) }
  -> nip_n  (Number n, *a) { Combi::rescope( a[0 .. a.len-(n + 1) ] ) }

  # TODO: ways to make lists from iteration without Array....

  func cleave (*args) {
    func _bind_cleave (*b) {
      b.map{ .run(@|args) }
    }
  }

  func combinate (*blocks) -> Block {
    func _combinate_args (*args) {
      func _r_combinate (last_res, Num i) {
        __FUNC__( blocks[i].run(last_res), i )
      }(blocks[0].run(args), 1)
    }
  }

  func curry (Block b, *args1) {
    func _curry( *args2 ) {
      b(@|args1, @|args2)
    }
  }

  func compose (Array _bx) -> Block {
    func curried (*_args) {
      func _compose (Array bx, Array args) {
        bx.len.is_one ? bx[0](args...) : bx[0](__FUNC__(bx.slice(1), args))
      }(_bx, _args)
    }
  }

  # const c = compose(s).cache
  # c(1, 2)
  # c(2, 4, 6, 8)


  const Block _bind_apply_block = func (args, Bool ffork) -> Block {
    func _apply_block (*blocks) -> Array {
      const method_name = (ffork ? :ffork : :run)
      const args_padding = ([ nil ] * blocks.len-args.len)
      const blocks_padding = ([ Block.list_identity ] * args.len-blocks.len)

      # rescope could be used here, but isn't necessary, not even for readability
      with (
        [args + args_padding, blocks + blocks_padding] \
          .zip.map{ _[1] |> ( method_name, _[0] ) }
      ) {
        del args
        (ffork ? .map{ .wait } : _)
      }
    }
  }

  func applyc   (Bool ffork, *args) -> Block { Combi::_bind_apply_block(args, ffork) }
  func apply_a  (Array args) -> Block { Combi::_bind_apply_block(args, false) }
  func apply    (*args) -> Block { Combi::_bind_apply_block(args, false) }
  func applyf_a (Array args) -> Block { Combi::_bind_apply_block(args, true) }
  func applyf   (*args) -> Block { Combi::_bind_apply_block(args, true) }

  func binop (a, b) -> Block {
    # say "a/b: '#{a}' '#{b}'"
    func _op (op) {
      given (op) {
        when (Block) { continue }
        when (String) { op.run(a, b) }
        when (LazyMethod) { continue }
        case (.is_typename) { continue }
        default { op(a, b) }
      }
    }
  }

  func _binop_pair_fewer_wrap (Array _args, Array ops) {
    func _recur_binop_pair_fewer_wrap (Array args, Num index) -> Array {
      !args ? [] : [
        Combi::binop( args[0, 1] )( ops[ index % ops.len ] ),
        @|__FUNC__( args.slice(2), index + 1)
      ]
    }(_args, 0)
  }

  func _bind_recur_binop_pair_n_op (Bool _single) {
    func _recur_binop_pair_n_op (Array args, Array ops) -> Array {
      !args ? [] : [
        Combi::binop( args[0, 1] )( ops[0] ),
        @|__FUNC__( args.slice(2), _single ? ops : ops.slice(1) )
      ]
    }
  }

  func _bind_binop_pairs (Array args) -> Block {
    func _binops (*ops) {
      # make up an argument if there was 1 less than even
      const Array padded_args = args+(args.len.is_odd ? [args.last.new] : [])
      const cond = { ops.len.is_one || (args.len / ops.len -> int == 2 ) }
      del args
      ifte( cond
        { _bind_recur_binop_pair_n_op( ops.len.is_one )( padded_args, ops ) }
        { _binop_pair_fewer_wrap( padded_args, ops ) }
      )
    }
  }
  func binop_pairs_a (Array args) -> Block { Combi::_bind_binop_pairs(args) }
  func binop_pairs (*args) -> Block { Combi::_bind_binop_pairs(args) }

  func _indent_by (String s, String i = (' ' * 2)) {
    cleave(s.lines)(
      { .first }
      { [.[1 .. .len-2]] -> map{ i + (_==')' ? ' ' : '') + _ }... }
      { .last }
    ).join(10.chr)
    # die;
  }

  struct FinalizerSpec {
    obj,
    Array obj_blocks = [],

    Array shared_f7rs = [], # always call these
    Array ok_f7rs = [],
    Array exc_f7rs = [],

    Bool exc_only = true
  }

  func dump (FinalizerSpec fs) {
    ::chomp(<<"EOT"
FinalizerSpec(
  obj:         #{fs.obj.dump}
  obj_blocks:  #{fs.obj_blocks.dump}
  shared_f7rs: #{fs.shared_f7rs.dump}
  ok_f7rs:     #{fs.ok_f7rs.dump}
  exc_f7rs:     #{fs.exc_f7rs.dump}
  exc_only:    #{fs.exc_only.dump}
)
EOT
    )
  }

  class F7rsReturned ( Array shared, Array ok, Array exc ) { }
  # class F7rsReturned (Array shared = [], Array ok = [], Array exc = []) { }

  # you can't ~~ structs
  subset LazyF7rsReturned < Block, F7rsReturned # { !defined(.can(:refaddr)) || ((.is_a(Block)) && .is_object && ._returns==[F7rsReturned]) }

  func dump (fr < LazyF7rsReturned) {
    (defined(fr.can(:refaddr)) && fr.is_a(Block)) ? "( func () -> (F7rsReturned) { ... } )" : ::chomp(<<EOT
F7rsReturned(
  shared: #{fr.shared}
  ok: #{fr.ok}
  exc: #{fr.exc}
)
EOT
    )
  }

  struct Finalized {
    Bool success

    Array blocks_ret,
    f7r_ret < LazyF7rsReturned,

    FinalizerSpec fs,
    Array _obj_blocks

    Hash exc_info
  }

  func dump (Finalized fd) {
    ::chomp(<<"EOT"
Finalized(
  success:    #{fd.success}
  blocks_ret: #{fd.blocks_ret}
  f7r_ret:    #{_indent_by(dump(fd.f7r_ret))}
  fs:         #{_indent_by(dump(fd.fs))}
  exc_info:   #{fd.exc_info.dump}
)
EOT
    )
  }

  func with_finalizers (FinalizerSpec fs) -> Block {
    const obj_class = fs.obj.class
    # say "\tFinalizer #{_indent_by(dump(fs), 9.chr)}\tregistered; calling it on exceptions only: #{fs.exc_only}"
    func _finalizer (*_obj_blocks) -> Finalized {

      const obj_blocks = ifte( { _obj_blocks || fs.obj_blocks }
        { cleave(.[0])( { .is_a(Block) }, { .is_object } ).all ? [ [ .[0] ] ] : _ }
        { [ [Block.list_identity] ] }
      )

      const exc_info = :( type => 'The operation completed successfully.', msg => '' ) # '

      -> fin (Bool is_exc) -> F7rsReturned {
        const caller = { [ fs.obj.method( .[0] )( is_exc, exc_info, @|.slice(1) ) ] }
        F7rsReturned(
          shared: (fs.shared_f7rs.map(caller)),
          exc: (is_exc ? fs.exc_f7rs.map(caller) : []),
          ok: ((!is_exc && !fs.exc_only) ? fs.ok_f7rs.map(caller) : [])
        )
      }

      const Set params_rest = Set(_obj_blocks: _obj_blocks, fs: fs, exc_info: exc_info)
      # due to a sidef bug, this can't be const
      var finalized = try {
        Finalized(
          success: true,
          blocks_ret: obj_blocks.map{ [ .[0].run( fs.obj, .slice(1)... ) ] },
          f7r_ret: func () -> F7rsReturned { fin(false) },
          params_rest...
        )
      } catch {
          |type, msg|
        # say "\tFinalizer #{_indent_by(dump(fs), 9.chr)}\tcalled because '#{type}'"
        exc_info{:type, :msg} = (type, msg)
        return Finalized(
          success: false,
          f7r_ret: fin(true),
          blocks_ret: [],
          params_rest...
        )
      }
      finalized.f7r_ret.run!
      finalized
    }
  }

  func with_destructors ( FinalizerSpec fs ) -> Block { with_finalizers(fs) }
}
