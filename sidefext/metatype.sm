#! ruby

# todo: Set ~~ and ~~ Set
# todo: subsets can't be chained
# todo: is_a and similar on Subsets (this is marked as todo elsewhere in the codebase)
subset ExtantArrStr < Array, String { .len && (.~~ Array ? .all{ .len } : true) }
define ITER_TYPES = Set(Array, String, Set, Bag, Matrix, Hash, Set, Pair, Range, RangeNum, RangeString)

module Maybe {
  subset Val < Object, null, nil

  # Maybe is a value / constructor of type Define, Maybe_Type is a typename
  define Maybe = struct Maybe_Type {
    Object just_type
    Object just = Object.new
    Bool nothing = false
  }

  func dump (Maybe_Type a) {
    ['Maybe( ', a.nothing ? 'nil' : ::dump(a.just.is_a(a.just_type) ? a.just : a.just_type()(a.just)), ' )'].join
  }

  define Block maybe = func _maybe (Object type { .is_typename }, a) -> Maybe_Type {
    # say "maybe called with '#{type}'; object: #{a}"
    func inner (Maybe_Type _) { _ }
    func inner (_) {
      (!defined(_) || _==null) ? Maybe(just_type: type, nothing: true) : Maybe( just_type: type, just: _ )
    }

    inner(a)
  }

  # a is a Maybe, but actually Maybe is a Define, so the precise type of a at `use constant` time is Maybe_Type
  define Block unmaybe = func _unmaybe (Maybe_Type a, Block b = Block.null_identity) { # < MaybeVal
    # say "a: #{dump(a)}
    a.nothing ? b(a) : (a.just.is_a(a.just_type) ? a.just : a.just_type()(a.just))
  }

  func is_just ( Maybe_Type _ )    { ! .nothing }
  subset Just  < Maybe_Type        { ! .nothing }
  func is_nothing ( Maybe_Type _ ) { .nothing }
  subset Nothing  < Maybe_Type     { .nothing }

  define Block CurryMaybe = func (type { .is_typename }) -> Block { { Maybe::maybe( type, _ ) } }
  define Block MaybeBool = CurryMaybe(Bool)
  define Block MaybeStr  = CurryMaybe(Str)
  define Block MaybeDir  = CurryMaybe(Dir)
  define Block MaybeArr  = CurryMaybe(Arr)
}


if (__FILE__ == __MAIN__) {
  func a (e < ExtantArrStr) {
    e
  }(["asd"])
  a("asd")
}
(ExtantArrStr)
(ITER_TYPES)
