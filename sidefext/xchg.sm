#! ruby
# reliable data export / exchange / interchange for Sidef builtins
#   primarily for JSON
include sidefext::metatype

class Array {
  method values { self }
  method all_eq { self.to_set.to_a == [self[0]] }
}
class Matrix { method values { self.flatten } }
class Pair   { method values { self.to_a } }
# class Set { method lacks (*_) { !self.has(_...) } }

module Explicit {
  define EXPL_TYP = :__XT
  define EXPL_STP = :__XS # homogenous subtypes of iterables
  define EXPL_VAL = :__XV
  define USER_TYPE_MAGIC = 'U!!!'
  define USER_TYPE_ERASER = Regex("^(?:#{USER_TYPE_MAGIC})?(.*)$")

  func make (type, val, stp = false) -> Hash {
    gather {
      take( EXPL_VAL val )
      take( EXPL_TYP type ) if type
      take( EXPL_STP stp )  if stp
    }.to_h
  }

  func _major_subtype_heuristic (val) {
    # the heuristic is an future optimization
    if (val.respond_to(:len) && val.respond_to(:values)) {
      if ( sidefext::metatype::ITER_TYPES.has(val.ref.lookup_ref.to_type) ) {
        with ( val.values.map{ .ref } ) {
          .all_eq && .[0]
        }
      } # else {}
    } # else?
  }

  func _tag_hook_return_check (Block b) {
    b._returns==[Hash] || die "Garbage return-type list untag user type hook #{b}; expected [Hash] but got #{b._returns}"
  }

  # TODO: FUTURE
  # func _major_subtype_heuristic_v2 (val) -> Array {
  #   ...
  #   var subtype = _major_subtype_heuristic(val)
  #   !subtype ? [] : [subtype, _major_subtype_heuristic_v2(val.values)...]
  # }
  # TODO: type coding

  func like_user_pair (Object obj) -> Bool {
    obj.is_a(Pair) && obj[0].ref.is_non_builtin_type && obj[0].is_typename && obj[1].is_a(Hash) && obj[1].is_object
  }
  func like_user_pair (Pair p, String ref_0) -> Bool {
    ref_0.is_non_builtin_type && p[0].is_typename && p[1].is_a(Hash) && p[1].is_object
  }
  func like_user_pair (Object obj, String ref_0) -> Bool {
    obj.is_a(Pair) && ref_0.is_non_builtin_type && obj[0].is_typename && obj[1].is_a(Hash) && obj[1].is_object
  }

  func _tag_base (obj, subtype, Block recurse_with, Block make_val) -> Hash {
    if ( ! defined(obj) ) {
      :( EXPL_TYP, :nil )
    } elsif (obj.is_typename) {
      :( EXPL_TYP, :typename, EXPL_VAL, obj.ref.mref )
    } else {
      # var (st, curried_to) = with ( _major_subtype_heuristic(obj) ) {
      #   (_, { |o| recurse_with(o, _) })
      # }

      var (user_pair, pre_ref) = if (obj.is_a(Pair)) {
        var r = obj[0].ref
        var l = like_user_pair(obj, r)
        (l, l ? r : obj.ref)
      } else { (false, obj.ref) }

      var (user_type, ref) = with (pre_ref) {
        var u = ( .is_non_builtin_type && !user_pair )
        (u, (user_pair || u) ? (USER_TYPE_MAGIC + .mref) : _)
      }
      # say "ref: #{ref}; want: #{ref.mref} pre_ref: #{pre_ref}; user_pair: #{user_pair}; user_type: #{user_type}"
      # say "obj: #{obj} last subtype: #{subtype}"

      var (st, made_val) = if (user_type) {
        var ir = make_val(obj)
        var ir_st = _major_subtype_heuristic(ir)
        (ir_st, ir)
      } elsif (!user_pair) {
        (_major_subtype_heuristic(obj), nil)
      } elsif (user_pair) {
        (_major_subtype_heuristic(obj[1]), nil)
      }# else { (false, nil) } # else { die '???' }

      var curried_tag = { |o| recurse_with(o, st) }
      Explicit::make(
        !subtype && ref,
        given (obj) {
          case ( user_type )     {
            # say "made_val: #{made_val}"
            made_val.map_kv{ |k, v| ( (k) => curried_tag(v) ) }
          }
          case ( user_pair )     { .[1].map_kv{ |k, v| ( (k) => curried_tag(v) ) } }
          case ( .is_a(Pair) )   { continue }
          case ( .is_a(Set) )    { continue }
          case ( .is_an(Array) ) { .to_a.map{ curried_tag(_) } }
          case ( .is_a(Hash) )   { .map_kv{ |k, v| ( (k) => curried_tag(v) ) } }
          default                { _ }
        },
        st
      )
    }
  }

  func _tag_user_hook (obj, Block hook, subtype = false) -> Hash {
    _tag_base(
      obj,
      subtype,
      func (o, s) -> Hash { _tag_user_hook(o, hook, s) },
      func (_)  -> Hash { hook(_) }
      # hook
    )
  }

  func _tag_user_default (obj, subtype = false) -> Hash {
    _tag_base( obj, subtype, __FUNC__, { die 'unreachable code' } )
  }

  func tag (obj, Block user_type_hook = Block.identity) -> Hash {
    if (user_type_hook.is_identity) {
      _tag_user_default(obj)
    } else {
      _tag_hook_return_check(user_type_hook)
      _tag_user_hook(obj, user_type_hook)
    }
  }

  func tag_hash (Hash data, Block user_type_hook = Block.identity) -> Hash {
    data.map_kv( if (user_type_hook.is_identity) {
        { |k, v| ( (k) => _tag_user_default(v) ) }
      } else {
        _tag_hook_return_check(user_type_hook)
        { |k, v| ( (k) => _tag_user_hook(v, user_type_hook) ) }
      }
    )
  }

  subset _Callable { .is_typename || (.is_object && .is_a(Block)) }

  var _untag_hash

  func _untag_base (Hash obj, subtype, Block recurse_with, make_val < _Callable) {
    if (obj{EXPL_TYP} == :nil) {
      nil
    } elsif (obj{EXPL_TYP} == :typename) {
      obj{EXPL_VAL}.lookup_ref.to_type
    } else {
      var curried_untag = func (Hash h) { recurse_with(h, obj{EXPL_STP} \\ false) }
      var (user_type, type) = with (subtype || obj{EXPL_TYP}) {
        (.starts_with(USER_TYPE_MAGIC), (.=~ USER_TYPE_ERASER) -> caps[0].lookup_ref.to_type)
      } else { die obj.dump+' wtf ??? (was the input data encoded properly?)' }

      var pre_val = obj{EXPL_VAL}

      # say "obj: #{obj.dump.lines.map{ 9.chr+_ }.join(10.chr)}\n\tref: '#{obj{EXPL_TYP}}' last subtype: #{subtype} type: #{type} user_type: #{user_type}\n"

      given ( type ) {
        case ( user_type ) { make_val(_, pre_val.map_kv{ |k, v| ( (k) => curried_untag(v) ) } ) }
        case ( .is_a(Pair) )   { continue }
        case ( .is_a(Set) )    { continue }
        case ( .is_an(Array) ) { type( pre_val.map{ curried_untag(_) }... ) }
        case ( .is_a(Hash) )   { type( pre_val.map_kv{ |k, v| ( (k) => curried_untag(v) ) }... ) }
        default                { type( pre_val ) }
      }
    }
  }

  func _untag_user_hook (Hash obj, Block hook, subtype = false) {
    _untag_base(
      obj,
      subtype,
      func (o, s) { _untag_user_hook(o, hook, s) },
      # hook
      func (type, Hash _) { hook(type, _) }
    )
  }

  func _untag_user_default (Hash obj, subtype = false) {
    _untag_base(obj, subtype, __FUNC__, Pair)
  }

  func untag (Hash obj, Block user_type_hook = Block.identity) {
    user_type_hook.is_identity
      ? _untag_user_default(obj)
      : _untag_user_hook(obj, user_type_hook)
  }

  func untag_hash (Hash data, Block user_type_hook = Block.identity) -> Hash {
    data.map_kv( user_type_hook.is_identity
      ? { |k, v| ( (k) => _untag_user_default(v) ) }
      : { |k, v| ( (k) => _untag_user_hook(v, user_type_hook) ) }
    )
  }
}
# module Xchg {}
