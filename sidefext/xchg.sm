#! ruby
# reliable data export / exchange / interchange for Sidef builtins
#   primarily for JSON
include sidefext::metatype

class Array {
  method values { self }
  method all_eq { self.to_set.to_a == [self[0]] }
}
class Matrix { method values { self.flatten } }
class Pair   { method values { self.to_a } }
# class Set { method lacks (*_) { !self.has(_...) } }

module Explicit {
  define EXPL_TYP = :__1XPT
  define EXPL_STP = :__1XPS # homogenous subtypes of iterables
  define EXPL_VAL = :__1XPV

  func make (type, val, stp = false) -> Hash {
    gather {
      take( EXPL_VAL val )
      take( EXPL_TYP type ) if type
      take( EXPL_STP stp )  if stp
    }.to_h
  }

  func _major_subtype_heuristic (val) {
    # the heuristic is an future optimization
    if (val.respond_to(:len) && val.respond_to(:all)) {
      if ( sidefext::metatype::ITER_TYPES.has(val.ref.lookup_ref.to_type) ) {
        with ( val.values.map{ .ref } ) {
          .all_eq && .[0]
        }
      } # else {}
    } # else?
  }

  # TODO: FUTURE
  # func _major_subtype_heuristic_v2 (val) -> Array {
  #   ...
  #   var subtype = _major_subtype_heuristic(val)
  #   !subtype ? [] : [subtype, _major_subtype_heuristic_v2(val.values)...]
  # }
  # TODO: type coding

  func to (obj, subtype = false) -> Hash {
    if ( ! defined(obj) ) {
      :( EXPL_TYP, :nil )
    } elsif (obj.is_typename) {
      :( EXPL_TYP, :typename, EXPL_VAL, obj.ref.mref )
    } else { # defined

      # NOTE: Sidef bug found! if either of these are `const`, the code fails
      var st  = _major_subtype_heuristic(obj)
      var bst = st.to_bool
      var curried_to = (bst ? func (_) -> Hash { Explicit::to(_, subtype: st) } : Explicit::to)

      var (like_user_pair, ref) = with (obj) {
        var r = (.is_a(Pair) ? .[0].ref : '')
        var lup = (r.starts_with('Sidef::Runtime') && with (.[1]) { .is_a(Hash) && .is_object })
        (lup, lup ? 'U!!!'+r.mref : .ref )
      }
      # say "obj: #{obj} ref: #{ref} st: '#{st}' last st: #{subtype} like_user_pair: #{like_user_pair}"

      Explicit::make(
        !subtype && ref,
        given (obj) {
          case ( like_user_pair ) { .[1].map_kv{ |k, v| ( (k) => curried_to(v) ) } }
          case ( .is_a(Pair) )    { continue }
          case ( .is_a(Set) )     { continue }
          case ( .is_an(Array) )  { .map{ curried_to(_) } }
          case ( .is_a(Hash) )    { .map_kv{ |k, v| ( (k) => curried_to(v) ) } }
          default                 { _ }
        },
        st
      )
    }
  }

  func tag (obj) { Explicit::to(obj) }

  var _hash_from

  func hash_to (Hash data) -> Hash {
    data.map_kv{
        |k, v|
      ( (k) => Explicit::to(v) )
    }
  }


  func from (Hash obj, subtype = false) {
    if (obj{EXPL_TYP} == :nil) {
      nil
    } elsif (obj{EXPL_TYP} == :typename) {
      obj{EXPL_VAL}.lookup_ref.to_type
    } else {
      var curried_from = (defined( obj{EXPL_STP} )
        ? func (Hash _) { Explicit::from(_, subtype: obj{EXPL_STP}) }
        : Explicit::from
      )

      var type_s = (subtype || obj{EXPL_TYP})
      var is_user_type = type_s.starts_with('U!!!')
      var type   = ( is_user_type ? (type_s =~ /^U!!!(.*)$/ -> caps[0]) : type_s ).lookup_ref.to_type

      var pre_val = obj{EXPL_VAL}

      # say "obj: #{obj.dump.lines.map{ 9.chr+_ }.join(10.chr)}\n\tref: '#{obj{EXPL_TYP}}' last subtype: #{subtype} type_s: #{type_s} type; #{type} is_user_type: #{is_user_type}\n"

      given ( type ) {
        case ( is_user_type ) { ( _ Â¦ Explicit::_hash_from(pre_val) ) }
        case ( .is_a(Pair) )  { continue }
        case ( .is_a(Set) )   { continue }
        case ( .is_a(Array) ) { type( pre_val.map{ curried_from(_) }... ) }
        case ( .is_a(Hash) )  { type( pre_val.map_kv{ |k, v| ( (k) => curried_from(v) ) }... ) }
        default { type( pre_val ) }
      }
    }
  }

  func untag (Hash obj) { Explicit::from(obj) }

  func hash_from (Hash data) -> Hash {
    data.map_kv{
        |k, v|
      ( (k) => from(v) )
    }
  }
  _hash_from = hash_from
}
# module Xchg {}
