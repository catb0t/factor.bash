#! sidef -WkP12

define Hash SCRIPT = :(
  "version" => "0.3",
  "name" => "multifactor",
  "doc" => "a meta build system for Factor core development",
  "bug" => "github.com/catb0t/multifactor/issues",
  "license" => "GPL v3+"
)

class Array {
  method first { return self[0] }
  method second { return self[1] }
  method third { return self[2] }
}

class String {
  method second { return self.char(1) }
  method third { return self.char(2) }
}

# basic variable definitions for working with Factor
module Factor {
  const String RC_FILE = Dir.home+"/.factor-rc"

  func find_config (name) {
    var regex = Regex("^! multifactor:#{name} (.*)")
    File(RC_FILE).open_r.lines.each { |line|
      if (line =~ regex->captures.first) { |m| return m } # NOTE: figure out why _ isn't available here
    }
    die "Config 'multifactor:#{name}' not found in #{Factor::RC_FILE}"
  }

  const String REPO = find_config("repo").to_str
  const Regex VERSION_REGEX = /VERSION = ([0-9]+\.[0-9]+)/
  const String VERSION = VERSION_REGEX=~( File(REPO+"/GNUmakefile")\
    .open_r.lines \
    .find { |line| line =~ VERSION_REGEX })
}

include argparse
# import argparse::ArgParse

# `build.sh` bash functions re-written in Sidef (??)
module BuildSh { }
module CSV { }
# words to checksum directory file contents and file names goes here
module GlobSum { }

class MultiFactor {
  # actually implement the data model
  class BlobDatabase (disk_name = ".multifactor.db") {

    has disk_file = -> { File( Factor::REPO + self.disk_name ) }


  }
}

func main () {
  # say Factor::RC_FILE
  # say Factor::REPO
  # say Factor::VERSION

  var parser = argparse::ArgParse(ARGV) \
    .info(SCRIPT) \
    .option("force", "f", doc: "Force a rebuild in any case") \
    .option("dry-run", "n", doc: "Print configuration; commit no changes") \
    .option("clean", "c", negate: "Always":"Never", doc: "'make clean'") \
    .option("sums", "s",  negate: "Always":"Never", doc: "use checksums") \
    .option("db", "d", param: "file":".multi", doc: "Use this database instead") \
    .use_option_terminator("Further arguments are given to Factor") \
    # .use_stdin_file_arg \
    # .use_arg_list_terminator \
    # .ignore_unknowns \
    .arg("args", doc: "Arguments to the final Factor VM")

  # say parser.help_me

  # say parser.go
}

if (__FILE__ == __MAIN__) {
  main()
}
