module CommaTools {
  const Block make_apply_block = -> (args, Bool ffork) {
    func _apply_block (*blocks) {
      const method_name = (ffork ? :ffork : :run)
      const args_padding = ([ nil ] * blocks.len-args.len)
      const blocks_padding = ([ { _ } ] * args.len-blocks.len)

      with ( [args + args_padding, blocks + blocks_padding].zip.map{ _[1] |> ( method_name, _[0] ) } ) {
        (ffork ? .map{ .wait } : _)
      }
    }
  }

  func applyc (Bool ffork, *args) { CommaTools::make_apply_block(args, ffork) }
  func apply (*args) { CommaTools::make_apply_block(args, false) }
  func applyf (*args) { CommaTools::make_apply_block(args, true) }
}

define Array MSG_REGEXES = [
  Pair(:NO_ERROR, /^$/)
  Pair(:DOES_NOT_MATCH,
    /^\[ERROR\] (func|method) `(.*)` does not match (.*\)), invoked as (.*\))\n\nPossible candidates are:\n([\S\s]*)$/m
  ),
  Pair(:NO_METHOD, /^\[AUTOLOAD\] Undefined method `(.*)' called from (.*\))/),
  Pair(:BAD_ENCODING, /^Unknown encoding '(.*)'/)
  Pair(:PERL_COMPILER, /Bareword/)
  Pair(:PERL_RUNTIME, /^(?:Not an? (.*) reference|Can't use (.*) \(("[^"]+")\) as an? (.*) ref .*) at .*/)
  Pair(:OTHER_UNCLASSIFIED, /^(?!\[(?:AUTOLOAD|ERROR)\])(.*)/)
  Pair(:PERL_INTERNAL, /^(.*)/)
]


func classify (String msg) -> (String, Object) {
  const type = MSG_REGEXES.find{ .value ~~ msg }
  if (!type) { die "#{__FUNC_NAME__}: can't classify THAT!"}
  (type.key, msg =~ type.value)
}

if (__FILE__ == __MAIN__) {
  DATA.slurp.split("\n%\n").each{
   CommaTools::apply( classify(_) )(
     { _+' => ' },
     { .captures.map{ .dump }.join(' ') },
   ).join.say
  }
}

__DATA__
[ERROR] func `__FUNC__` does not match __FUNC__(Number), invoked as __FUNC__(2)

Possible candidates are:
    __FUNC__()
    __FUNC__(Array)
%
[AUTOLOAD] Undefined method `Hash.asdasd' called from main()
%
Unknown encoding '' at /home/cat/perl5/lib/perl5/Sidef/Types/String/String.pm line 1179.
%
Not a HASH reference at (eval 30) line 5.
%
Can't use string ("Sidef::Types::Hash::Hash") as a HASH ref while "strict refs" in use at (eval 38) line 5.
