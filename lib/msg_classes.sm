#! ruby

##  MsgClasses, classifying Sidef exceptions
##    Copyright Cat Stevens 2018
##  This program is free software: you can redistribute it and/or modify
##    it under the terms of the GNU General Public License as published by
##    the Free Software Foundation, either version 3 of the License, or
##    (at your option) any later version.
##
##    This program is distributed in the hope that it will be useful,
##    but WITHOUT ANY WARRANTY; without even the implied warranty of
##    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##    GNU General Public License for more details.
##
##    You should have received a copy of the GNU General Public License
##    along with this program.  If not, see <https://www.gnu.org/licenses/>.

include lib::combi

module MsgTypes {
  define NO_ERROR           = :NO_ERROR
  define DOES_NOT_MATCH     = :DOES_NOT_MATCH
  define NO_METHOD          = :NO_METHOD
  define BAD_ENCODING       = :BAD_ENCODING
  define PERL_COMPILER      = :PERL_COMPILER
  define PERL_RUNTIME       = :PERL_RUNTIME
  define OTHER_UNCLASSIFIED = :OTHER_UNCLASSIFIED

  define Array METHOD_EXISTS = [:NO_ERROR, :DOES_NOT_MATCH, :BAD_ENCODING]
  define Array OVERLOAD_EXISTS = [:NO_ERROR, :BAD_ENCODING]
}

define Array MSG_REGEXES = [
  Pair(:NO_ERROR, /^$/)
  Pair(:DOES_NOT_MATCH,
    /^(?:\[ERROR\] )?(?<block_type>func|method) `(?<block_name>[\S\s]*)` does not match \g{block_name}\((?<block_tried_proto>.*)\), invoked as \g{block_name}\((?<block_tried_invoke>[\S\s]*)\)\n\nPossible candidates are: ?\n(?<block_dispatches>[\S\s]*)\n*/m
  ),
  Pair(:NO_METHOD, /^(?:\[AUTOLOAD\] )?Undefined method `(?<method_name>.*)' called from (?<method_invoked_from>.*)/),
  Pair(:BAD_ENCODING, /^Unknown encoding '(?<encoding>.*)'/)
  Pair(:PERL_COMPILER, /Bareword/)
  Pair(:PERL_RUNTIME, /^(?:Not an? (?<tried_ref>.*) reference|Can't use (?<tried_ref_type>.*) \((?<tried_ref_with>"[^"]+")\) as an? (?<tried_ref>.*) ref while.*) at .*/)
  Pair(:OTHER_UNCLASSIFIED, /^(?<value>[\S\s]*)/)
  # Pair(:PERL_INTERNAL, /^(.*)/)
]

func block_dispatches_cleanup (String ds) -> Hash {
  define Regex r = /\G\s+(?<block_name>.+)\((?<block_dispatch>.*?)\)/
  r.global_matches(ds, {
      |i, _|
    .named_captures.map_kv{
        |k, v|
      ( ("#{k}:#{i}") => v )
    }
  } ).reduce{ |l, r| l.merge(r) }
}

func msg_fields (m) is cached -> Hash {
  m.named_captures.map_kv{
      |k, v|
    ( (k) => k==:block_dispatches ? block_dispatches_cleanup(v) : v )
  }
}

func classify (String msg) is cached -> (String, Object) {
  const type = MSG_REGEXES.find{ .value ~~ msg }
  if (!type) { die "#{__FUNC_NAME__}: can't classify THAT!\n\t#{msg.dump}"}
  (type.key, msg_fields(msg =~ type.value) )
}

if (__FILE__ == __MAIN__) {
  DATA.slurp.split("\n%\n").each{
    Combi::applyf( classify(.apply_escapes) )(
      { assert_ne(_, MsgTypes::OTHER_UNCLASSIFIED); _+' => ' },
      { _ },
    ).join.say
  }
  say "*** Test passed!"
}


__DATA__
[ERROR] func `MaybeArr` does not match MaybeArr(Number), invoked as MaybeArr(2)

Possible candidates are:
    MaybeArr()
    MaybeArr(Array)
%
method `GG` does not match GG(Number), invoked as GG(2)

Possible candidates are:
    GG()
    GG(Num)
    GG(GGGG)
%
[AUTOLOAD] Undefined method `Hash.asdasd' called from main()
%
Unknown encoding '' at /home/cat/perl5/lib/perl5/Sidef/Types/String/String.pm line 1179.
%
Not a HASH reference at (eval 30) line 5.
%
Can't use string ("Sidef::Types::Hash::Hash") as a HASH ref while "strict refs" in use at (eval 38) line 5.
%
method `x` does not match x(X, Number), invoked as x(X(), 1)\n\nPossible candidates are: \n    X.x(self)\n
