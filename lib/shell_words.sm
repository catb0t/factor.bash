#! ruby
#! sidef -WkP1
#`(exit the shell) {
  eval 'exec sidef -WkP1 $0 ${1+"$@"}'
}
##  shell_words, part of MultiFactor
##    Copyright Cat Stevens 2018
##  This program is free software: you can redistribute it and/or modify
##    it under the terms of the GNU General Public License as published by
##    the Free Software Foundation, either version 3 of the License, or
##    (at your option) any later version.
##
##    This program is distributed in the hope that it will be useful,
##    but WITHOUT ANY WARRANTY; without even the implied warranty of
##    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##    GNU General Public License for more details.
##
##    You should have received a copy of the GNU General Public License
##    along with this program.  If not, see <https://www.gnu.org/licenses/>.

include lib::command
include Command
include lib::feature

# `build.sh` bash functions
# mostly THEIR (upstream) utilities, re-implemented in Sidef

module BuildConst {
  define Regex VERSION_REGEX = /VERSION = ([0-9]+\.[0-9]+)/
  define Regex REPRODUCIBLE_REGEX = /REPRODUCIBLE/

  define File GNU_MAKEFILE = %f(./GNUmakefile)
  define File N_MAKEFILE = %f(./Nmakefile)
  define File GIT_ID_SPECIAL_FILE = %f(./git-id)

  define String FACTORCODE_GIT_URL = 'git://factorcode.org/git/factor.git/'
  define String NOT_A_GIT_REPO = '^~not a git repository~^'
  define Array  NOT_GIT_SYMS = [ BuildConst::NOT_A_GIT_REPO[0..2] ]
  define String DEFAULT_GIT_BRANCH = :master

  # branchname and file name are to be replaced
  define String BASE_REMOTE_IMAGE_URL = 'https://downloads.factorcode.org/images/%s/%s'
  define String CHECKSUM_FILENAME = 'checksums.txt'

  define Set PERTINENT_RESOURCE_PATHS = Set(:vm, :core, :basis)
}

module DirKind {
  define Set USER_RESOURCE_PATHS = %w{core basis extra}.map{ .to_dir }.to_set
  define Hash _user_exist = :(
    :dirs => Set( %d(extra), USER_RESOURCE_PATHS... ),
    :files => Set( BuildConst::GIT_ID_SPECIAL_FILE )
  )
  define Hash _dev_exist = :(
    :dirs => Set( %d(.git), %d(vm) ),
    :files => Set( %f(./build.sh), %f(./build.cmd), BuildConst::GNU_MAKEFILE, BuildConst::N_MAKEFILE )
  )

  define Hash DIR_CONTENTS = :(
    :dev => Hash(
      :exist => _dev_exist+:(:dirs => (_dev_exist{:dirs} + _user_exist{:dirs}) ),
      :not_exist => :(:files => Set(), :dirs => Set())
    ),
    :user => Hash(
      :exist => _user_exist,
      :not_exist => _dev_exist
    )
  )
}

class BuildSh {
  -> init { die "#{__CLASS_NAME__}: don't instantiate me, only use my methods statically" }
  -> downloader {
    Feature::UserAgent.new(show_progress => 1)
  }
  -> make_http_request (url) -> String {
    # this can't be expressed so simply with if {}
    Combi::ifte(
      BuildSh.downloader.get(url),
      { .is_success }
      { .decoded_content }
    )
  }
  -> find_programs (String kind, Array ps) is cached -> String {
    STDERR.say("Look for '#{kind}': #{ps.join(', ')}...") # '
    for p in ps {
      const s = `which #{p.quotemeta}`.chomp
      if (Number($?) == 0) {
        STDERR.say("    found #{s}")
        return s
      }
    }
    die "no #{kind}"
  }
  # TODO: not *required*
  # binaries and images aren't compatible across compiler versions though
  # -> check_cc_version (String name) is cached -> Bool {
  #   Bool(name)
  #   ...
  # }
  -> cc () is cached -> String {
    BuildSh.find_programs(:cc, %w(clang gcc cc))
  }
  -> cxx () is cached -> String {
    BuildSh.find_programs(:cxx, %w(clang++ g++ c++ cpp))
  }
  # NOTE: os_type is distinct to osname
  -> os_name (n = nil) is cached -> String {
    given (n || Sys.osname) {
      when (/(?:windows|cygwin)/i) { :windows }
      when (/(?:macos|darwin)/)  { :macos }
      when (/(?:linux|mingw)/)  { :linux }
      when (/(?:bsd|haiku|android|ios)/i) { _ }
      default { die "Unknown osname: #{Sys.osname}" }
    }
  }
  -> os_type (t = nil) is cached -> String {
    given ( t || BuildSh.os_name ) {
      when (/(?:linux|darwin|macos|bsd|mingw)/i) { :unix }
      when (/(?:windows|cygwin)/i) { :windows }
      when (/(?:haiku|android|ios)/i) { _ }
      default { die "Can't convert osname to os_type: #{Sys.osname}" }
    }
  }
  -> arch_name () is cached -> String {
    static const uname = `uname -m`.chomp
    given (uname) {
      case ( [:ppc64, "Power Macintosh"].any{ uname.contains(_) } ) { :ppc }
      when ( /a(?:rm|arch)64/i ) { :arm64 }
      # EABI would be Factor on Bare Metal which isn't in the near future
      when ( /armv7/i ) { :armhf }
      default { :x86 }
    }
  }
  -> c_word_size () is cached -> String {
    define File ws_binary = %f(factor_word_size)
    `echo '#include <stdio.h>
    int main(){printf(\"%ld\",(long)(8*sizeof(void*)));}' | #{BuildSh.cc} -xc -o#{ws_binary} -`

    die "couldn't call the C compiler: #{$!}" \
      if (Number($?) != 0)

    # NOTE: can't be const, or else the value will be discarded
    var String ws = `./#{ws_binary}` # `
    if (Number($?) != 0) {
      var e = $!
      ws_binary.remove
      die "couldn't run the word size program: #{e}" # "
    }
    ws_binary.remove
    ws
  }
  -> intel_macosx_word_size () is cached -> String {
    `#{BuildSh.find_programs(:sysctl, [:sysctl])} machdep.cpu.extfeatures | grep EM64T >/dev/null` # `
    (Number($?)==0 ? :64 : :32)
  }
  -> word_size () is cached -> String {
    if (BuildSh.os_name~~:macos && BuildSh.arch_name~~:x86) {
      BuildSh.intel_macosx_word_size
    } else {
      BuildSh.c_word_size
    }
  }

  -> generate_make_targets () is cached -> Hash {
    # const (
    static const ot = BuildSh.os_type
    static const on = BuildSh.os_name
    static const an = BuildSh.arch_name
    static const ws = BuildSh.word_size
    static const bn = BuildSh.git_branch
    # )
    Hash(
      :make_image => "#{on}-#{an}.#{ws}",                  # MAKE_IMAGE_TARGET
      :make_vm => "#{on}-#{an}-#{ws}",                     # MAKE_TARGET
      :boot_image_base => "#{ot}-#{an}.#{ws}",             # boot image base (NON STANDARD)
      :boot_image => File("boot.#{ot}-#{an}.#{ws}.image"), # BOOT_IMAGE
      :boot_image_branch => File("boot_#{bn}_.#{ot}-#{an}.#{ws}.image") # not in build.sh (NON STANDARD)
    )
  }

  # lots of things aren't allowed in a git branchname
  # see `man git check-ref-format` and https://stackoverflow.com/a/3651867/4532996
  # we're going to use just ~ and ^ internally to identify non-git strings
  -> is_git_ref_name (Str b) is cached -> Bool {
    b.is_empty && die "[ERROR] #{__FILE__}:#{__LINE__}: #{__METHOD_NAME__}: bug found: empty string given to #{__METHOD_NAME__}, fixme or show this to someone who can fix"
    b!=BuildConst::NOT_A_GIT_REPO && !( BuildConst::NOT_GIT_SYMS.any{ b.contains(_) } )
  }

  # check the outputs of these with is_git_ref_name:

  # returning `nil` from these is not an option, because `nil` is an empty string
  -> _git_branch () is cached -> String {
    static const branch = `git rev-parse --abbrev-ref HEAD` # `
    (Number($?)==0 ? branch.chomp : BuildConst::NOT_A_GIT_REPO)
  }

  -> _git_hash () is cached -> String {
    static const hash = (`git rev-parse HEAD`.chomp || try { BuildConst::GIT_ID_SPECIAL_FILE.open_r.read_line })
    (Number($?)==0 ? hash : BuildConst::NOT_A_GIT_REPO)
  }

  -> try_git (Str operation, Str caller_name, Bool fatal = true) is cached {
    const git_output = BuildSh.method(:_git_ + operation)(BuildSh)
    if (! BuildSh.is_git_ref_name(git_output) ) {
      fatal && die "[FATAL] #{__METHOD_NAME__}: git_#{operation}: #{caller_name} requires #{Dir.cwd} to be a git repository"
    } else {
      git_output
    }
  }

  -> git_branch () is cached -> String { BuildSh._git_branch }

  -> git_hash () is cached -> String { BuildSh._git_hash }

  -> git_branch_test ( Bool _ { _ } ) is cached -> (Bool, String) {
    with ( BuildSh._git_branch ) {
      Combi::rescope( _, BuildSh.is_git_ref_name(_) )
    }({
        |name, is_git|
      (is_git, is_git ? name : BuildConst::DEFAULT_GIT_BRANCH)
    })
  }

  # does not require a git directory, does require an internet connection
  # git ls-remote https://factorcode.org/git/factor.git/refs/heads/
  # -> Index of /git/factor.git/refs/heads/
  -> git_ls_remote (String remote) is cached -> Set {
    with ( `git ls-remote #{remote} 2>&1` ) {
        |refs|
      # say refs
      if ( refs =~ /^fatal: unable to (access|look up) / ) {
          |error|
        with (Feature::ANSIColor) {
          say (.RED '[WARN]  Cannot ', .YELLOW, error, .RED ' the Factor git repository: \'', remote, "'", .RESET)
        }
        Set()
      } else {
        refs.lines.to_set.map{ . =~ /^(?<hash>[[:alnum:]]{40})\t(?<name>.*)$/ -> captures }
      }
    }
  }

  -> true_remote_branches () is cached -> Set {
    BuildSh.git_ls_remote(BuildConst::FACTORCODE_GIT_URL)
  }

  -> is_git () is cached -> Bool {
    [:branch, :hash].all{ BuildSh.try_git(_, __METHOD_NAME__, fatal: false) }
  }

  -> platform_vm_ext (n = nil) is cached -> String {
    given ( n || BuildSh.os_name ) {
      when (:windows) { ".exe" }
      default { "" }
    }
  }

  -> platform_lib_name (n = nil) is cached -> Pair {
    static const N = (n || BuildSh.os_name)
    (
      given (N) {
        when (:windows) { "" }
        default { "lib" }
      } Â¦ given (N) {
        when (:windows) { ".dll" }
        when (:macos) { ".dylib" }
        default { ".a" }
      }
    )
  }

  -> platform_makefile (n = nil) is cached -> File {
    static const N = (n || BuildSh.os_name)
    ( N ~~ :windows ? BuildConst::N_MAKEFILE : BuildConst::GNU_MAKEFILE )
  }

  # TODO: fix for when there is no makefile, something other than die
  -> platform_makefile_lines () is cached -> Array {
    (BuildSh.platform_makefile.open_r \\> :lines) ->
      \\ die "[ERROR] #{__METHOD_NAME__}: no such file or directory: #{BuildSh.platform_makefile.abs}"
  }

  # TODO: do something other than die
  -> factor_version () is cached -> String {
    const result = (BuildSh.platform_makefile_lines.find{ _ ~~ BuildConst::VERSION_REGEX } ->
      || die "[FATAL] #{__METHOD_NAME__}: can't find a VERSION in Makefile #{BuildSh.platform_makefile.abs}"
    )

    (BuildConst::VERSION_REGEX =~ result)[0]
  }

  -> feature_reproducible () is cached -> Bool {
    Bool( BuildSh.platform_makefile_lines.find{ _ ~~ BuildConst::REPRODUCIBLE_REGEX } )
  }

  -> factor_directory_kind (logger = class {}.def_method(:vbs, Block.null_identity) ) is cached -> String {
    const MN = __METHOD_NAME__
    const FL = __METHOD_NAME__
    const Dir d = %d(.)
    const DirHandle dh = d.open_r
    const Array props = %w{dirs files}
    const Hash status = props.map{
      ((_) => Set( dh.method( _ )()... ))
    }.to_h
    dh.close

    # say status

    logger.vbs(FL, __LINE__, MN, "grep entry")
    (DirKind::DIR_CONTENTS.grep_kv{
        |_k, v|
        logger.vbs(FL, __LINE__, MN, "#{_k} #{v}")
      :(:exist => Block.identity, :not_exist => {Set()}).map_kv{
          |e_type, cmp_with|
        ((e_type) => props.map{
            |prop|
          const kind_data = v{ e_type }{ prop }
          const state = status{ prop }
          # kind_data&status{ prop } == cmp_with(kind_data)
          logger.vbs(FL, __LINE__, MN, "\t#{e_type} #{prop}")
          const res = ( kind_data&state == cmp_with(kind_data) )
          logger.vbs(FL, __LINE__, MN, "\treason:\n\t\tkind_data: #{kind_data}\n\n\t\tstate: #{state}\n\n\t\tkind_data & state: #{kind_data & state}\n\n\t\tcmp_with(kind_data): #{cmp_with(kind_data)}\n\t\t== kind_data: #{res}")
          res
        }.all)
      }.values.all
    }.keys.first \\ :none)
  }

  # -> platform_make (*args) {
  #   const N = (n || BuildSh::os_name())
  #   ( N ~~ :windows ? ['set CL=/MP & nmake'] : ['make', '-j'] )
  # }

  -> make_clean (Bool output = false) -> Bool {
    Combi::first( Command::make(:clean, output: output) )
  }

  # bo_target: BuiltObj
  -> make_factor ( bo_target, Bool output = false ) {
    # var (pre, suf) = BuildSh::platform_lib_name()...
    (BuildSh.generate_make_targets(){:make_vm} -> cleave(
      { say "Building '#{_}' with infinite cores" },
      { Command::make(
          _,
          (BuildSh.feature_reproducible ? 'REPRODUCIBLE=1' : ' SITE_CFLAGS="-D__DATE__=\'\"[reproducible-workaround]\"\' -D__TIME__=\'\"\"\'" '),
          output: output
      ) }
    ).last \
      && :factor.cleave(
        Set(:vm, :lib).map{
            |name|
          { |fc|
            # const f = File( factor.join( bo_target.method(name+:_format)()[0, 2] ) )
            # say "file #{f} #{bo_target.method(name+:_fullname)()}"
            # const format =
            # say "#{name} format: #{format}"
            # const full =
            # say "#{name} full: #{full}"
            # ...
            const from = bo_target.method(name + :_format)().ordered_run_keys(:pfx_platform, :ext).join(fc)
            const to = bo_target.method(name + :_fullname)()
            # say "from: #{from}; to: #{to}"
            File( from ).move( to )
            # say "st: #{r}"
            # r
          }
        }...
      ).all
    )
  }

  -> make_clean_factor (/* BuiltObj */ bo_target, Bool no_clean = false, Bool output = false) { # */
    ( no_clean ? true : BuildSh.make_clean(output: output) ) && BuildSh.make_factor(bo_target, output: output)
  }

  # aka set_boot_image_vars
  # force_branch allows to use a different remote branch instead of local current branch
  #   useful when this is not a git repo or when the branch is local only
  #   set to true for DEFAULT_GIT_BRANCH, or a string for that branch name
  #
  # force_current_branch_exists_remotely prevents redundant calculation of git ls-remote
  #   if the caller already knows it
  # don't use this option if you're not 100% sure it exists remotely

  # NOTE: force_current_branch_exists_remotely is technically susceptible to a race condition
  #   if the remote branch disappears between the caller's calculation and our request
  #   but that's a necessary tradeoff
  # just don't leave too many cycles between the steps please
  -> boot_image_urls (force_branch = nil, Bool force_current_branch_exists_remotely = false) is cached -> Hash {
    with (force_branch) {
      ((. == true) ? BuildConst::DEFAULT_GIT_BRANCH : force_branch).rescope{
        Hash(
          :checksum => BuildConst::BASE_REMOTE_IMAGE_URL.sprintf(
            _, BuildConst::CHECKSUM_FILENAME ),

          :boot_image_url => BuildConst::BASE_REMOTE_IMAGE_URL.sprintf(
            _, BuildSh.generate_make_targets(){:boot_image} )
        )
      }
    } else {
      const Array status              = [BuildSh.test_git_branch(true)]
      const Bool is_git               = status[0]
      const String initial_use_branch = status[1]

      # if we are not a git repo, we use branch master, which exists remotely of course
      # if we are git repo, it is either forced (promised) to exist, or we really check for real
      # NOTE: a network request must occur somewhere in this branch; it's right here
      const current_branch_exists_remotely = ( (!is_git) || (
        force_current_branch_exists_remotely || BuildSh.true_remote_branches.has( initial_use_branch )
      ) )

      const use_branch = (current_branch_exists_remotely ? initial_use_branch : BuildConst::DEFAULT_GIT_BRANCH)

      # simply make a full url out of a filename
      -> current_branch_file_url (String filename) is cached {
        BuildConst::BASE_REMOTE_IMAGE_URL.sprintf( use_branch, filename )
      }

      # OLD: test if the remote server has a checksums.txt for the current branch, i.e. if it exists
      # const non_master_branch_ok = Bool( BuildSh.make_http_request( curbranch_file_url(BuildConst::CHECKSUM_FILENAME) ) )

      Hash(
        :checksum => current_branch_file_url( BuildConst::CHECKSUM_FILENAME ),
        :boot_image_url => current_branch_file_url( BuildSh.generate_make_targets(){:boot_image} )
      )
    }
  }

  # failure case?
  -> _process_checksums_file (String data, String want_name) {
    data.lines.find{
      .contains(want_name)
    } \\> (:split, 32.chr) \\> :second \\ die "#{__METHOD_NAME__}: !!! gibberish checksum data when looking up '#{want_name}':\n#{data}"
  }

  # previously (or in build.sh / factor.bash) named _get_boot_image
  # download a URL to a file, give the name of the file, and a block which will remove it
  -> _remote_boot_image_to_file (Hash url_spec) -> Hash {
    const MN = __METHOD_NAME__
    say (MN + ': Downloading boot image file ' + url_spec)

    const image_file = File(url_spec{:boot_image_url}.split('/').last)

    const remote_checksum_data = ( BuildSh.make_http_request( url_spec{:checksum} ) ->
      || return { say "#{MN}: Can't retrieve the boot image checksum at #{url_spec{:checksum}}"; :(status => false) }()
    )

    const image_data = ( BuildSh.make_http_request( url_spec{:boot_image_url} ) ->
      || return { say "#{MN}: Can't retrieve the boot image at #{url_spec{:boot_image_url}}"; :(status => false) }()
    )

    const remote_md5 = BuildSh._process_checksums_file(remote_checksum_data, image_file)
    const local_md5_mem = image_data.md5

    say "#{MN}: boot image sums (mem): #{remote_md5} / #{local_md5_mem}"

    (url_spec{:checksum_mismatch_ok} || (remote_md5 == local_md5_mem)) ->
      || die "#{MN}: !!! in-memory boot image does not match remote checksum (unrecoverable)"

    const local_md5_disk = image_file.touch.cleave(
      { .binmode },
      { .spurt( image_data ) },
      { .slurp.md5 }
    ).last

    say "#{MN}: boot image sums (disk): #{remote_md5} / #{local_md5_disk}"

    (url_spec{:checksum_mismatch_ok} || (remote_md5 == local_md5_disk)) ->
      || {
        image_file.remove
        die "#{MN}: !!! disk boot image does not match remote checksum (unrecoverable)"
      }()

    :( status => true, file => image_file, remover => func () -> Bool { image_file.remove } )
  }

  # TODO: allow the checksum of local boot image to fail due to no internet, but not break the build
  # TODO: allow the checksum of local boot image to be stored locally
  # -> update_boot_image (Bool _assume_lbi_ok = false) {
  #   # const MN = __METHOD_NAME__
  #   # given ( BuildSh.git_branch ) {
  #   #   when (BuildConst::NOT_A_GIT_REPO) { continue }
  #   #   when (BuildConst::DEFAULT_GIT_BRANCH) {  }
  #   #   default { }
  #   # }
  #   # const File boot_image_file = BuildSh.generate_make_targets(){:boot_image}
  #   # say "#{__METHOD_NAME__}: Removing old data..."
  #   File( BuildConst::CHECKSUM_FILENAME ).remove
  #   # remove all boot images with a name like BOOT_IMAGE.{?,??}
  #   # File(boot_image_name + '*').glob.grep{ _ ~~ Regex("#{boot_image_name}\.(?:.|..)") }.map{ File(_).remove }
  #   File("temp/staging.*.image").glob.each{ File(_).remove }
  #   say "#{__METHOD_NAME__}: Processing #{boot_image_file}"
  #   if ( boot_image_file.exists ) {
  #    say "#{__METHOD_NAME__}: have a local #{boot_image_file}, need to checksum"
  #    const boot_image_urls = BuildSh.boot_image_urls
  #    const remote_checksum_data = BuildSh.make_http_request( boot_image_urls{:checksum} )
  #    if (! remote_checksum_data) {
  #      say "#{__METHOD_NAME__}: Can't download, can't checksum"
  #      return false
  #    }
  #    const remote_md5 = BuildSh._process_checksums_file(remote_checksum_data, boot_image_file)
  #    const local_md5 = boot_image_file.md5
  #    say "#{__METHOD_NAME__}: boot image sums: #{remote_md5} / #{local_md5}"
  #    if (remote_md5 != local_md5) {
  #      say "\t#{__METHOD_NAME__}: !!! local / remote checksum mismatch !!! "
  #      boot_image_file.remove
  #      return BuildSh._get_boot_image
  #    }
  #    say "#{__METHOD_NAME__}: Local boot image matched remote sum"
  #    true
  #   } else {
  #    say "#{__METHOD_NAME__}: no local #{boot_image_file}, need to get"
  #    BuildSh._get_boot_image
  #   }
  # }

  -> blob_file_contents_sum (File f, Str algo = :sha256) {
    f.cleave(
      { .binmode },
      { .open_r.cleave({ .slurp |> (algo || :sha256) }, { .close }) },
    )
  }
}
