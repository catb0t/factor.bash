#! ruby
# Perl.eval('push @INC, "."')
# Perl.eval('use Data::Dumper; Dumper( \@INC )')

include sidefext::iterable

module Feature {
  # # WIP: doesn't work on travis for some convoluted reason
  # define File forks = File('/home/'+Sys.user+'/perl5/lib/perl5/x86_64-linux-gnu-thread-multi/forks.pm')
  # # define y = say [ forks.open_r.lines[1569, 1570] ].join("\n")
  # define _forks = try {
  #   'forks'.require
  # } catch {
  #     |type, msg|
  #   say "caught: #{type} : #{msg}"
  #   given (msg) {
  #     when (/^Argument .* isn't numeric in numeric ge/) {
  #       say "Patching local forks.pm..."
  #       # # https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=780351
  #       # # https://rt.cpan.org/Public/Bug/Display.html?id=102730
  #       # # https://lists.freebsd.org/pipermail/freebsd-perl/2015-May/010803.html
  #       # `chmod u+w #{forks}`
  #       # Number($?)==0 || die "Couldn't make local forks.pm writable: #{$!}"
  #       # `patch -p2 -F2 -u -i misc/forks.patch #{forks}`
  #       # Number($?)==0 || die "Couldn't patch local forks.pm: #{$!}"
  #       # `sidef -E '{}.thr.detach'`
  #       # Number($?)==0 || die "Sidef couldn't use the forks module: #{$!}"
  #       # 'forks'.require
  #       # `perl -Ilib -Mforks -e1`
  #       # Number($?)==0 || die "Perl still couldn't load the forks module: #{$!}"
  #       # say "Success! loaded forks.pm"
  #     }
  #     when (/^Can't locate forks.pm/) { die "Please install forks! try 'cpanm forks'" }
  #     default { die "Couldn't load the forks module for an unexpected reason: Perl said: '#{msg}'" }
  #   }
  # }

  # TODO: make this ondemand
  define (
    Array _INSTALLED_MODULES_THREADS = [
      ::ffork({ `cpan -l 2>/dev/null`.map_lines{ .split(9.chr).first } })
      ::ffork({ [ try { 'Module::CoreList'.require.find_modules } ] })
      ::ffork({ [ try { 'ExtUtils::Installed'.require.new.modules } ] })
    ]
    # File WORD_LIST_FILE = ( (Sys.osname ~~ :windows) ? %f(misc/words) : %f(/usr/share/dict/words) )
  )

  # func WORD_LIST () is cached -> Array {
  #   static const w = do {
  #     { say "Word list loading..." }() # "
  #     const _ = Feature::WORD_LIST_FILE.open_r.grep{ .~~ /^[a-zA-Z]+$/ }
  #     { say "Loaded #{.len} words." }()
  #     _
  #   }
  # }

  define (
    ANSIColor = 'Term::ANSIColor'.frequire # '
    ReadKey   = 'Term::ReadKey'.frequire # '
    DEFAULT_CHECKSUM = :sha256 # TODO: stop using sha256 in most places; allow xxHash & FNV etc
    # other non-dependent code goes here ...
    Set _INSTALLED_MODULES = Feature::_INSTALLED_MODULES_THREADS.map{ .wait... }.to_set
    Hash _lookup_cache = Hash()
    Block lookup = func ( by { .is_a(String) || .is_a(Regex) } ) -> Set {
      Feature::_lookup_cache{by} \\= Feature::_INSTALLED_MODULES.grep{ . ~~ by }
    }

    Block lookup_n = func (Array bys) -> Array {
      bys.reduce({ |l, r| l||lookup(r) || die "Need one of: #{bys}" }, lookup(bys[0]) ).to_a
      # bys.map{ lookup(_).to_a[0] }.grep.first
    }

    Block require1 = func (Array bys, Bool frequire = false) {
      { lookup_n(bys)[0] |> (frequire ? :frequire : :require) }.ffork
    }

    Hash _LOADING_MODULES = :(
      :JSON => require1([/^JSON::XS$/, /^JSON::PP$/]),
    )

    _LOADED_MODULES = Feature::_LOADING_MODULES.map_kv{ |k, _| ((k) => .wait) }

    JSON = _LOADED_MODULES{:JSON}
  )
}

with ( Feature::ANSIColor ) {
  # say Feature::JSON.new.decode('{}')
  say( .color(:bright_green), 'Feature : ContentLoaded', .RESET)
}
