#! ruby
include lib::frext

module Command {
  define Regex RETVAL_REGEX = /__RETURNED=(\d+)/

  # this can be sped up further but it needs a bit of algorithm R&D
  define Block CHAR_OUTPUTTER = {
      |full_str, ch|
    (*full_str).last==(10.chr) && (9.chr.print 9.chr.print)
    ch.print
    *full_str += ch
  }
  define Block NO_OUTPUT = { |f, c| *f += c }

  # TODO: use an algorithm that only looks for as many characters as the RETURNED
  #   regex needs, unless the caller wants the output which they almost never do
  #   instead of building the entire string only to look at the end
  func spawn_se (Bool output = false, *cmdline) -> (Number, Bool) {
    $| = 1

    STDERR.say("\t\b\b-> #{cmdline.join(' ')}")

    const Block _char_op = (output ? CHAR_OUTPUTTER : NO_OUTPUT)

    Number(
      (Pipe( cmdline.add([";", "echo", '"__RETURNED=$?\n"']).join(' ') ) \
        .open_r.cleave(
          { .autoflush(true) },
          { "\n\t\t".print if (output) },
          {
            # if we increased the scope of c and co then the cleave is redundant, but that would be slower
            var c = ''
            const Block co = { |b| _char_op(\c, b) }
            .each_char(co)
            c.last(16)
          }
        ).last \
        .lines.find{ _ ~~ RETVAL_REGEX } =~ RETVAL_REGEX
      )[0].to_n
    ).cleave(
      Block.identity
      { .== 0 }
    )...
  }
  func ql (Array args) -> String {
    args.map{ .quotemeta+' ' }.join
  }
  func make (Bool output = false, *args) -> (Number, Bool) {
    Command::spawn_se('make', '-j', args..., output: output)
  }
  func nmake (Bool output = false, *args) -> (Number, Bool) {
    Command::spawn_se('set CL=/MP & nmake', args..., output: output)
  }
}
