#! ruby

##  Functional and Reflective EXTensions for Sidef metaprogramming
##    Copyright Cat Stevens 2018
##  This program is free software: you can redistribute it and/or modify
##    it under the terms of the GNU General Public License as published by
##    the Free Software Foundation, either version 3 of the License, or
##    (at your option) any later version.
##
##    This program is distributed in the hope that it will be useful,
##    but WITHOUT ANY WARRANTY; without even the implied warranty of
##    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##    GNU General Public License for more details.
##
##    You should have received a copy of the GNU General Public License
##    along with this program.  If not, see <https://www.gnu.org/licenses/>.

include lib::msg_classes
include lib::combi

module FRExt {

  subset ArrStr < Array, String { .len }

  module TypeUtils {
    func is_serializable (Object obj) {
      obj.respond_to(:serial_properties)
      # obj.has_overload( Hash( :callers => __FUNC_NAME__, :name => :serial_properties) )
    }
    # Fully-Qualified Sidef::Runtime:92349879234::main::Typename Typename
    #   to Universal Main-Derived Typename main::Typename
    func fqtn_to_umdtn (String fqtn) -> String {
      (/^Sidef::Runtime::\d+::(main::.+)$/ =~ fqtn)[0]
    }

    func maybe_call_custom_init (Object obj) {
      if ( obj.respond_to(:INIT_METHOD_NAME) ) {
        obj.method( obj.INIT_METHOD_NAME )()
      } elsif ( obj.is_typename ) {
        # invoke raw typenames
        obj()
      } else {
        obj
      }
    }

    func object_hash_ref (callers < FRExt::ArrStr, Object obj, String field_name) {
      try {
        # say "#{callers.last}: \t\tREF PROPERTY #{obj.class} #{field_name}"
        \(obj{field_name})
      } catch {
          |_e, msg|
        Combi::rescope( lib::msg_classes::classify(msg) )({
            |type, fields|
          die "\t** object_hash_ref < (#{callers.reverse.join(' < ')}):\n\t\t#{obj.class} { #{field_name} } FAILED! reason: #{type}"
        })
      }
    }
  }

  class Object {
    # method form of "with", but defined-agnostic
    method rescope (b) { b.run(self) }
    method cleave (*b) { b.map{ .run(self) } }

    # internal; doesn't care about overloads
    /* -> respond_to (String name, *_) -> Bool { self.can(name, _...) } */
    /* -> can        (String name, *_) -> CODE { UNIVERSAL::can(self, name, _...) } */

    method declares_method (String name) -> Hash {
      self.grep_methods{ |n, _| n ~~ name }
    }

    method is_an_object (typename) {
      self.is_a(typename) && self.is_object
    }

    # test if it can be called with the specific number and type of arguments
    method has_overload (Hash overload_spec) -> Hash {
      overload_spec.template_transform( :(
        :args => Array,
        :callers => Array, # :required => true
        :name => String,
        :give_return => Bool,
        :clone_call => Bool,
        :debug => Bool,
      ) ).rescope{
          |spec|
        # say "#{spec}"
        die 'invalid has_overload spec: \'callers\' must be a non-empty array of non-empty strings' \
          if ( ! spec{:callers}.cleave( { _ }, { .is_an(Array) }, { .all }, { .all{ .is_a(String) } } ).all  )

        const invalid_caller = 'invalid has_overload spec from ('+spec{:callers}.join(' > ')+'): '

        die invalid_caller+'\'name\' must be nonempty string' \
          if ( ! spec{:name}.cleave( { _ }, { .is_a(String) }, { .respond_to(:len) } ).all )

        die invalid_caller+'\'args\' must be iterable' \
          if ( ! spec{:args}.respond_to("...") )

        try {
          if (spec{:debug}) {
            say "\t** has_overload < (#{spec{:callers}.reverse.join(' < ')}):\n\t\t.method( '#{spec{:name}}' )( #{spec{:args}.map{.dump}.join(', ')} ) ;; clone_call: #{spec{:clone_call}}"
          }

          const r = ( spec{:clone_call} ? self.dclone : self).method( spec{:name} )( spec{:args}... )
          spec{:debug} && say "\t\t\tinvocation worked!"

          :( :state => true, :return => (spec{:give_return} ? r : nil) )

        } catch {
            |_e, msg|
          Combi::rescope( lib::msg_classes::classify( msg) )({
              |type, fields|
            if (spec{:debug}) {
              say("\t\t\t"+'invocation failed! reason: ' + type + ' => ' +
                fields.grep_kv{ .!= :block_tried_invoke }
              )
            }

            :(
              :state => false,
              :why => type,
              :details => fields
            )
          })
        }
      }
    }

    # declared, exists, can be called
    method has_public_concrete_method (callers < ArrStr, String name) {
      self.cleave(
        { .respond_to(name) },
        { .declares_method(name) },
        { .has_overload( Hash(
            :callers => [@|callers, __METHOD_NAME__],
            :name => name,
            :clone_call => true,
            # :catch_msg_ref => \var String msg
          ) ).rescope{
            .{:state} || (MsgTypes::METHOD_EXISTS.contains( .{:why} ))
          }
        }
      ).all
    }

    method has_public_concrete_overload (callers < ArrStr, Str name, *args) {
      self.cleave(
        { .respond_to(name) },
        { .declares_method(name) },
        { .has_overload( Hash(
            :callers => [@|callers, __METHOD_NAME__],
            :name => name,
            :clone_call => true,
            :args => args
          ) ).rescope{
            .{:state} || (MsgTypes::OVERLOAD_EXISTS.contains( .{:why} ) )
          }
        }
      ).all
    }

    # TODO: use hash as arg / return val, and allow getting the value etc (prevent replaying as much as possible)
    method is_property (callers < ArrStr, Str name, Object type_example_arg) -> Bool {
      # self-respecting explicitly declared accessors are typed, and not varargs
      # field accessors generated with "has X" are untyped varargs
      self.has_overload( Hash(
          :callers => [@|callers, __METHOD_NAME__],
          :name => name,
          :clone_call => true,
          :args => [type_example_arg, :extra_garbage_arg],
          # :debug => true
      ) ).rescope{
        # say "is_property: #{self.class}::#{name} :: #{.{:state}}"
        .{:state} || ( ! MsgTypes::NOT_PROPERTY.exists( .{:why} ) )
      }
    }

    method grep_methods (Block g) {
      self.methods.grep_kv(g)
    }

    method grep_sorted_methods (Block g, Block s) {
      self.grep_methods(g).pairs.sort(s) # { |l, r| l.first <=> r.first }
    }

    method grep_map_methods (Block g, Block m) {
      self.grep_methods(g).map_kv(m)
    }
    method grep_sorted_map_methods (Block g, Block s, Block m) {
      self.grep_sorted_methods(g, s).map{ m.run( .key, .value ) }
    }
  }

  class Array {
    method all { self.all{ _ } }
    method merge_reduce { self.reduce{ |l, r| l.merge(r) } }
  }

  func _templ_tform_single (Hash one_spec, String k, _v) -> Object {
    one_spec.rescope{
      if ( .{:deferred} ) {
        return .{:deferred}
      }

      const Bool type_is_name = .{:type}.is_typename
      const one_type          = ( type_is_name # the typename, or the first one in an iterable
                                  ? .{:type}
                                  : .{:type}[0]
                                )
      const v                 = ( _v  \\ .{:default} \\ (
                                  .{:val_is_typename}
                                    ? .{:type}
                                    : TypeUtils::maybe_call_custom_init( one_type() ) )
                                )
      # say "k: '#{k}' _v: '#{_v}' v: '#{v}' itn: '#{Bool(.{:val_is_typename})}'"
      const need_cast         = ( (! .{:val_is_typename}) && ( type_is_name # only cast when none of the types fit
                                  ? ( .{:type}        !~ v )
                                  : ( .{:type}.all{ _ !~ v } )
                                ))

      (need_cast ? .{:maybe_cast}.run(v) : v).rescope{
          |v_c|
        # cast tgus retyrb value?
        (.{:conv} ~~ Block)
          ? .{:conv}.run( v_c )
          : v_c
      }
    }
  }

  class Hash {
    # inverse of + / merge: only update keys that are already truthy in the LHS
    method clobber_existing_by (other) -> Hash {
      self.map_kv{
          |k, v|
        ((k) => if ( v && other.has_key(k) ) {
          other{k}.run(k, v)
        } else {
          v
        })
      }
    }

    method template_transform (Hash spec) -> Hash {
      spec.map_kv{
          |k, spec_v|
        const self_v = self{k}

        ((k) => given ( spec_v ) {
          when ( nil ) { self_v }
          case ( .is_typename ) {
            defined(self_v)
              ? TypeUtils::maybe_call_custom_init( _( @|self_v ) )
              : TypeUtils::maybe_call_custom_init( _() )
          }
          when (Hash) {
            FRExt::_templ_tform_single(_, k, self_v)
          }
          default { die "don't know that spec value: '#{_}' ('#{self_v}'; key: '#{k}')"}
        })
      }
    }
  }
}

-> _test_frext {
  assert_eq( Object.has_overload(
    :(:callers => [:main], :name => :respond_to, :give_return => true)),
    :( :return => false, :state => true )
  )
}

if (__FILE__ == __MAIN__) {
  _test_frext()
}
