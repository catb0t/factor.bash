#! ruby

##  Functional and Reflective EXTensions for Sidef metaprogramming
##    Copyright Cat Stevens 2018
##  This program is free software: you can redistribute it and/or modify
##    it under the terms of the GNU General Public License as published by
##    the Free Software Foundation, either version 3 of the License, or
##    (at your option) any later version.
##
##    This program is distributed in the hope that it will be useful,
##    but WITHOUT ANY WARRANTY; without even the implied warranty of
##    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##    GNU General Public License for more details.
##
##    You should have received a copy of the GNU General Public License
##    along with this program.  If not, see <https://www.gnu.org/licenses/>.

include sidefext::combi
include sidefext::iterable
include sidefext::object
include sidefext::metatype

include lib::msg_classes

module FRExt {
  include sidefext::metatype
  import sidefext::metatype::ExtantArrStr

  define Hash TEMPLATE_SPEC_HAS_OVERLOAD = :(
    :args => Array,
    :callers => :( :type => Array, :subtype => Hash( :element_subset => ExtantArrStr ), :required => true ),
    :name => :( :type => String, :subtype => Hash( :subset => ExtantArrStr ), :required => true ),

    :give_return => Bool,
    :clone_call => Bool,
    :give_err => :( :type => Bool, :default => !__OPTIMIZED__ ),
    :debug => Bool,
  )

  class Object {
    # test if it can be called with the specific number and type of arguments
    method has_overload (:overload_spec) -> Hash {
      TEMPLATE_SPEC_HAS_OVERLOAD.template_transform( overload_spec ).rescope{
          |spec|
        # say "#{spec}"
        die 'invalid has_overload spec: \'callers\' must be a non-empty array of non-empty strings' \
          if ( ! spec{:callers}.cleave( Block.identity, { .is_an(Array) }, { .all }, { .all{ .is_a(String) } } ).all  )

        const invalid_caller = 'invalid has_overload spec from ('+spec{:callers}.join(' > ')+'): '

        die invalid_caller+'\'name\' must be nonempty string' \
          if ( ! spec{:name}.cleave( Block.identity, { .is_a(String) }, { .respond_to(:len) } ).all )

        # die invalid_caller+'\'args\' must be iterable' if ( ! spec{:args}.respond_to("...") )
        try {
          if (spec{:debug}) {
            say "\t** has_overload < (#{spec{:callers}.reverse.join(' < ')}):\n\t\t.method( '#{spec{:name}}' )( #{spec{:args}.map{.dump}.join(', ')} ) ;; clone_call: #{spec{:clone_call}}"
          }

          const r = Combi::rescope( ( spec{:clone_call} ? self.dclone : self).method( spec{:name} )( spec{:args}... ) )({
            (spec{:give_return} ? _ : nil)
          })
          spec{:debug} && say "\t\t\tinvocation worked!"

          :( :state => true, :return => r )

        } catch {
            |_e, msg|
          (!spec{:give_err}
            ? :(state => false)
            : Combi::rescope( lib::msg_classes::classify( msg) )({
                |type, fields|
              if (spec{:debug}) {
                say("\t\t\t"+'invocation failed! reason: ' + type + ' => ' +
                  fields-Set(:block_tried_invoke)
                )
              }

              :( :state => false, :why => type, :details => fields )
            })
          ) # end ternary
        }
      }
    }

    # declared, exists, can be called
    method has_public_concrete_method (callers < ExtantArrStr, String name) {
      self.cleave(
        { .respond_to(name) },
        { .declares_method(name) },
        { .has_overload(
            :callers => [@|callers, __METHOD_NAME__],
            :name => name,
            :clone_call => true,
            :give_err => true
          ).rescope{
            .{:state} || (MsgTypes::METHOD_EXISTS.contains( .{:why} ))
          }
        }
      ).all
    }

    method has_public_concrete_overload (callers < ExtantArrStr, Str name, *args) {
      self.cleave(
        { .respond_to(name) },
        { .declares_method(name) },
        { .has_overload(
            :callers => [@|callers, __METHOD_NAME__],
            :name => name,
            :args => args,
            :clone_call => true,
            :give_err => true
          ).rescope{
            .{:state} || (MsgTypes::OVERLOAD_EXISTS.contains( .{:why} ) )
          }
        }
      ).all
    }

    # TODO: use hash as arg / return val, and allow getting the value etc (prevent replaying as much as possible)
    method is_property (callers < ExtantArrStr, Str name, Object type_example_arg) -> Bool {
      # self-respecting explicitly declared accessors are typed, and not varargs
      # field accessors generated with "has X" are untyped varargs
      self.has_overload(
          :callers => [@|callers, __METHOD_NAME__],
          :name => name,
          :args => [type_example_arg, :extra_garbage_arg],
          :clone_call => true,
          :give_err => true
      ).rescope{
        # say "is_property: #{self.class}::#{name} :: #{.{:state}}"
        .{:state} || ( ! MsgTypes::NOT_PROPERTY.exists( .{:why} ) )
      }
    }

    method grep_methods (Block g) {
      self.methods.grep_kv(g)
    }

    method grep_sorted_methods (Block g, Block s) {
      self.grep_methods(g).pairs.sort(s) # { |l, r| l.first <=> r.first }
    }

    method grep_map_methods (Block g, Block m) {
      self.grep_methods(g).map_kv(m)
    }
    # propbably possible to develop a more efficient algorithm for this
    method grep_sorted_map_methods (Block g, Block s, Block m) {
      self.grep_sorted_methods(g, s).map{ m.run( .key, .value ) }
    }
  }
}

-> _test_frext {
  assert_eq(
    Object.has_overload(
      :callers => [:main], :name => :respond_to, :give_return => true
    ),
    :( :return => false, :state => true )
  )
}

if (__FILE__ == __MAIN__) {
  _test_frext()
}
