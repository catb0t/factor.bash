#! ruby
#! sidef -vWkP8
#`(exit the shell) {
  eval 'exec sidef -WkP8 $0 ${1+"$@"}'
}

##  GuardIO, guarded and locked file access
##    Copyright Cat Stevens 2018
##  This program is free software: you can redistribute it and/or modify
##    it under the terms of the GNU General Public License as published by
##    the Free Software Foundation, either version 3 of the License, or
##    (at your option) any later version.
##
##    This program is distributed in the hope that it will be useful,
##    but WITHOUT ANY WARRANTY; without even the implied warranty of
##    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##    GNU General Public License for more details.
##
##    You should have received a copy of the GNU General Public License
##    along with this program.  If not, see <https://www.gnu.org/licenses/>.

include lib::ABCs
include lib::feature
include lib::shell_words

module GuardIO {
  func _bn (Str f) { File(f).basename.split('.').first }

  class SLog (is_trace = true, is_verbose = false, logger = { |c, *a| with ( Feature::ANSIColor ) { STDERR.say( .color('bold', c), a..., .RESET ) } }) {

    -> wrn (Str f, Num l, Str m, *args) { with ( Feature::ANSIColor ) { say "#{.RED}[WARN]\t#{_bn(f)}:#{l}: #{m}: #{args.join(' ')}#{.RESET}" } }

    -> inf (Str f, Num l, Str m, *args) { self.logger.run('green', "[INFO]\t", _bn(f), ':', l, ': ', m, ': ', args.join(' ')) }
    -> trc (Str f, Num l, Str m, *args) { self.is_trace && self.logger.run('cyan', "[TRACE]\t", _bn(f), ':', l, ': ', m, ': ', args.join(' ')) }
    -> vbs (Str f, Num l, Str m, *args) { self.is_verbose && self.logger.run('cyan', "[VBOSE]\t", _bn(f), ':', l, ': ', m, ': ', args.join(' ')) }
  }

  -> make_uuid (Bool words = false, Num len = nil) -> String {
    with (len || (words ? 7 : 32)) {
      ( words
        ? Feature::WORD_LIST().sample( _ ).map{ .downcase }.join('_')
        : .random_bytes.map{ .base(62).rescope{ (.len.is_one ? :0 : '') -> + _ } }.join )
    }
  }

  -> read_binary_b64 (name) {
    name.open('< :raw :bytes', \var fh)
    const res = fh.slurp.encode_utf8.encode_base64
    res
    fh.close
    res
  }

  -> write_binary_b64 (name, b64) {
    name.touch
    name.open('> :raw :bytes', \var fh)
    const res = fh.spurt(b64.decode_base64.decode_utf8)
    res
    fh.close
    res
  }

  func ellipsify_absolute (File name) -> String { '.../'+Dir(name.dir.basename)+File(name.basename) }

  module Atomic {

    define String temp_read_ext = "\.tmp_read_"
    define String temp_write_ext = "\.tmp_write_"

    -> _temp_read_target (File name) is cached -> File {
      File(name + Atomic::temp_read_ext + GuardIO::make_uuid(words: false) )
    }
    -> _temp_write_target (File name) is cached -> File {
      File(name + Atomic::temp_write_ext + GuardIO::make_uuid(words: false) )
    }

    # NOTE: NOT instance-specific, i.e doesn't use *OUR* UUID in name
    # this copies a file to a temporary for reading
    func _temp_r (File name) -> File {
      die "Cannot stat #{name}" if (! name.exists)
      const File target = Atomic::_temp_read_target(name)
      if (! name.copy(target) ) {
        die "Can't copy file #{name} to #{target}: #{$!}"
      }
      target
    }
    # this makes a temp file for writing, which can be rename()d over `name`
    func _temp_w (File name) -> File {
      const File target = Atomic::_temp_write_target(name)
      if (target.exists) {
        die "Create file #{target}: file exists"
      }
      target
    }
    # argument is used literally
    func _finalise_temp_r (File target) {
      die "Cannot stat #{target}" if (! target.exists)
      if (! target.remove) {
        die "Can't remove #{target}: #{$!}"
      }
    }
    # requires literal arguments due to UUID
    func _finalise_temp_w (File name, File target) {
      die "Cannot stat #{target}" if (! target.exists)
      if (! target.move(name)) {
        die "Can't move #{target} over #{name}: #{$!}"
      }
    }

    # these are actually the interfaces to the above words
    # this returns a filehandle to in-memory string
    func aread (File name) -> String {
      const File tmp = Atomic::_temp_r(name)
      const tmp_fh = tmp.open_r
      die "Couldn't open file for reading: #{tmp}: #{$!}" if (! tmp_fh)
      const String contents = tmp_fh.slurp
      die "Read file '#{tmp}' failed: #{$!}" if (! defined(contents))
      # check error here?
      tmp_fh.close
      Atomic::_finalise_temp_r(tmp)
      contents
    }

    func awrite (File name, String contents) {
      const File tmp = Atomic::_temp_w(name)
      const tmp_fh = tmp.open_w
      die "Couldn't open file for writing: #{tmp}: #{$!}" if (! tmp_fh)
      const Bool res = tmp_fh.spurt(contents)
      die "Couldn't write #{contents.len} bytes to #{tmp}: #{$!}" if (! res)
      tmp_fh.close
      Atomic::_finalise_temp_w(name, tmp)
      nil
    }
  }

  subset FsObj < File, Dir

  define Hash TEMPLATE_SETUP_GLOBLOCKER = :(
    :uuid => String,
    :remove_old_lock => Bool,
    :lock_ext => :( :type => String, :default => '.lock_ext' ), # '
    :locked_fods => :( :type => Array, :subtype => :( :element_subset => FsObj ) ),
    :verbose => Bool,
    :trace => Bool,
  )

  class GlobLocker {
    has Set _locked_fods
    has SLog log
    has Bool remove_old_lock
    has String lock_ext
    has String uuid

    -> locked_fods () -> Set { self._locked_fods }
    -> locked_fods (lf) -> __CLASS__ { self._locked_fods = lf.to_set; self }

    method setup (:g) {
      GuardIO::TEMPLATE_SETUP_GLOBLOCKER.template_transform( g ).rescope{
        self.log = SLog(is_verbose: .{:verbose}, is_trace: .{:trace})
        self.locked_fods( .{:locked_fods}.map{ .abs.realpath } )
        self.remove_old_lock = .{:remove_old_lock}
        self.lock_ext = .{:lock_ext}
        self.uuid = .{:uuid}

        if (self.remove_old_lock) {
          self.log.wrn(__FILE__, __LINE__, __METHOD_NAME__, '!!!',
            'blindly removing old lockfiles (unsafe/debug)')
        }
      }
      self
    }

    method destroy (Bool is_exc, Hash exc_info) {
      self.cleanup
    }

    -> _glue_absolute (t) is cached -> File {
      const File lock_file = File(t + self.lock_ext) # expecting t to be absolute

      die "[BUG]\t#{__METHOD_NAME__}: didn't create an absolute path by gluing '#{t}' and '#{self.lock_ext}': #{lock_file}" \
        if (! lock_file.is_abs)
      lock_file
    }

    -> _lock_exists (target < FsObj, Bool cleanup) {
      const MN = __METHOD_NAME__
      const lock_file = self._glue_absolute(target)

      const Str contents = Atomic::aread(lock_file).chomp
      # say "#{contents}"
      die "[ERROR]\t#{MN}: empty lockfile for target '#{target}'; not safe to continue" \
        if (! contents)

      if (contents == self.uuid) {
        if (! cleanup) {
          die ("[BUG]\t #{MN}: lock file '#{lock_file}' for " +
            "target '#{target}' contains the current process' UUID" +
            "\n\tUnnecessary read; MultiFactor bug found! in #{target.basename}")
        }
        lock_file.remove
        self.log.vbs(__FILE__, __LINE__, MN, "cleaned up #{ellipsify_absolute(lock_file)}")
      } else {
        self.log.vbs(__FILE__, __LINE__, MN, "!! UUID mismatch: #{contents} â‰  #{self.uuid}")
        die (
          "[ERROR]\t#{MN}: lock file '#{lock_file}' for target '#{target}' contains foreign UUID!" +
          "\n\t(only one MultiFactor process should be active in a directory)" +
          "\n\tnot removing it; not continuing"
        )
      }
    }

    -> _do_remove_old_lock {
      if (self.remove_old_lock) {
        self.locked_fods.each{
          const lf = self._glue_absolute(_)
          self.log.vbs(__FILE__, __LINE__, __METHOD_NAME__, "try to clear old lock file #{ellipsify_absolute(lf)}")
          lf.exists && (
            lf.remove || self.wrn(__FILE__, __LINE__, __METHOD_NAME__, "can't remove #{lf} for an unknown reason: #{$!}")
          )
        }
      }
    }

    # NOTE: this ensures "we are a running process and we must be the only such running process"
    -> _do_lock_file (target, Bool cleanup, Bool promised = false) {

      # die "[ERROR]\t#{__METHOD_NAME__}: lock target '#{target}' does not exists" \
      if (! target.exists) {
        if (!promised) {
          return { self._do_lock_file(target, cleanup, true) } # '
        }
        die "[ERROR]\t#{__METHOD_NAME__}: you promised that target '#{target}' would exist, but it still does not" # '
      }

      const lock_file = self._glue_absolute(target)

      if (lock_file.exists) {
        self._lock_exists(target, cleanup)
      } else {
        Atomic::awrite(lock_file, self.uuid)
        self.log.vbs(__FILE__, __LINE__, __METHOD_NAME__, "created #{ellipsify_absolute(lock_file)}")
      }
    }

    method do_lock_files () -> Set {
      # self._setup_done || die "#{__METHOD_NAME__}: setup not done!"
      self._do_remove_old_lock
      self.log.trc(__FILE__, __LINE__, __METHOD_NAME__, "locking FODs: #{self.locked_fods.map{ ellipsify_absolute(_) }.join(', ')}")
      self.locked_fods.map{
          |target|
        self._do_lock_file( target, false )
      }.rescope{
        self.log.vbs(__FILE__, __LINE__, __METHOD_NAME__, "done locking FODs!")
        _.to_set
      }
    }

    method cleanup {
      # self._setup_done || die "#{__METHOD_NAME__}: setup not done!"
      self.log.trc(__FILE__, __LINE__, __METHOD_NAME__,
        "cleanup lock files for FODs: #{self.locked_fods.map{ ellipsify_absolute(_) }.join(', ')}")
      self.locked_fods.each{
          |target|
        self._do_lock_file( target, true )
      }
      self.log.vbs(__FILE__, __LINE__, __METHOD_NAME__, "cleaned up lock files!")
    }
  }
}
