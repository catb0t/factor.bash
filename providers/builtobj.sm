#! ruby

##  builtobj, data class provider for various disk and database compiled objects
##    Copyright Cat Stevens 2018
##  This program is free software: you can redistribute it and/or modify
##    it under the terms of the GNU General Public License as published by
##    the Free Software Foundation, either version 3 of the License, or
##    (at your option) any later version.
##
##    This program is distributed in the hope that it will be useful,
##    but WITHOUT ANY WARRANTY; without even the implied warranty of
##    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##    GNU General Public License for more details.
##
##    You should have received a copy of the GNU General Public License
##    along with this program.  If not, see <https://www.gnu.org/licenses/>.

include lib::ABCs
import lib::ABCs::SeriallyEquatable
import lib::ABCs::SeriallyAccessible
import lib::ABCs::Lockable

include lib::shell_words
import lib::shell_words::BuildSh

class DirSum (Str algo = '', Str names = '', Str contents = '') < SeriallyEquatable {
  has Hash serial_properties = [:algo, :names, :contents].map{ ( (_) => Str ) }.to_h
}

class SrcSums (DirSum vm = DirSum(), DirSum core = DirSum(), DirSum basis = DirSum(), Bool basis_ignored = false ) < SeriallyEquatable {
  has Hash serial_properties = Hash(
    :basis_ignored => Bool,
    [:vm, :core, :basis].map{ ( (_) => DirSum ) }...
  )
}

class BlobSums (Str algo = '', Str vm = '', Str lib = '', Str boot = '') < SeriallyEquatable {
  has Hash serial_properties = [:algo, :vm, :lib, :boot].map{ ( (_) => Str ) }.to_h
  method =~ (other) { self._serial_eq(other, exclude_props: [:boot]) }
}

class VirtualBase64Blob (Str data = '', Str algo = '', Str sum ='') < SeriallyEquatable {
  has Hash serial_properties = [:data, :algo, :sum].map{ ( (_) => Str ) }.to_h
}

class TimeSpec < SeriallyAccessible {
  has Hash serial_properties = [:created, :modified, :accessed, :tombstoned].map { ( (_) => Num ) }.to_h
}


module _BuiltObjConst {
  import lib::shell_words::BuildSh

  import providers::builtobj::DirSum
  import providers::builtobj::SrcSums
  import providers::builtobj::BlobSums
  import providers::builtobj::TimeSpec
  import providers::builtobj::VirtualBase64Blob

  define Array BLOB_TARGETS = [:vm, :lib, :image, :boot]

  define Hash FORMAT_DEFAULTS = Hash(
    :vm => Hash( :pfx_platform => { '' }, :pfx_custom => { :fvm_ }, :ext => { BuildSh.platform_vm_ext } ),
    :image => Hash( :pfx_platform => { '' }, :pfx_custom => { :fvm_ }, :ext => { '.image' } ),
    :lib => Hash( :pfx_platform => { BuildSh.platform_lib_name[0] }, :pfx_custom => { :fvm_ }, :ext => { BuildSh.platform_lib_name[1] } ),
    :boot => Hash( :pfx_platform => { 'boot.' }, :pfx_custom => { :fvm_ }, :ext => { '.image' } ) # '
  )

  define Hash SPROPS = Hash(
    :id => Str,
    :factor_version => Str,
    :is_git => Bool,
    :git_branch => Str,
    :git_hash => Str,

    :os_type => Str,
    :os_name => Str,
    :arch_name => Str,
    :word_size => Str,

    :stored_boot_image => VirtualBase64Blob,
    :src_sums => SrcSums,
    :blob_sums => BlobSums,
    :blob_algorithm => [Str, :sha256, Hash(
      :get => {
        .blob_sums.algo || *TypeUtils::object_hash_ref([:custom_getter], _, :_blob_algorithm)
      }
    ) ], # default: sha256

    :timespec => TimeSpec,
  )

  define Array SPROP_GEN = [ {
    _BuiltObjConst::BLOB_TARGETS.map{
        |target|
      const tf = (target + :_format)
      ( (tf) => [Hash, _BuiltObjConst::FORMAT_DEFAULTS{target}, Hash(
        :get => {
          # this underscore is important
          # note the associativity of * dereference here
          (*TypeUtils::object_hash_ref([:custom_getter], _, :_ + tf )) \\ _BuiltObjConst::FORMAT_DEFAULTS{target}
        }
      ) ] )
    }.to_h
  } ] # { Hash(:junk => Number) }
}

class BuiltObj << Lockable, SeriallyAccessible {
  has Hash serial_properties = _BuiltObjConst::SPROPS
  has Array serial_property_generator_builtobj = _BuiltObjConst::SPROP_GEN
  # these are not accessors, just methods that glue accessed values together
  # create boot_fullname etc
  has Array init_steps_10_builtobj = [ {
    _BuiltObjConst::BLOB_TARGETS.each{
        |name|
      func gen (self) -> File {
        const fmt = self.method(name + :_format)()
        # there is a cleaner way to write this but it would be much slower i imagine
        # using Combi::binop('+') and combinate or apply
        File( String( [fmt{:pfx_platform, :pfx_custom}].map{ .run.to_s }... ) + self.id + fmt{:ext}.run )
      }
      # NOTE: create NAME_fullname that calls .format
      __CLASS__.def_method(name + :_fullname, gen)
    }
  } ]
}
