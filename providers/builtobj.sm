#! ruby

##  builtobj, data class provider for various disk and database compiled objects
##    Copyright Cat Stevens 2018
##  This program is free software: you can redistribute it and/or modify
##    it under the terms of the GNU General Public License as published by
##    the Free Software Foundation, either version 3 of the License, or
##    (at your option) any later version.
##
##    This program is distributed in the hope that it will be useful,
##    but WITHOUT ANY WARRANTY; without even the implied warranty of
##    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##    GNU General Public License for more details.
##
##    You should have received a copy of the GNU General Public License
##    along with this program.  If not, see <https://www.gnu.org/licenses/>.

include lib::ABCs
import lib::ABCs::SeriallyEquatable
import lib::ABCs::SeriallyAccessible
import lib::ABCs::Lockable

class DirSum (Str algo = '', Str names = '', Str contents = '') < SeriallyEquatable {
  has Hash serial_properties = [:algo, :names, :contents].map{ ( (_) => Str ) }.to_h
}

class SrcSums (DirSum vm = DirSum(), DirSum core = DirSum(), DirSum basis = DirSum(), Bool basis_ignored = false ) < SeriallyEquatable {
  has Hash serial_properties = Hash(
    :basis_ignored => Bool,
    [:vm, :core, :basis].map{ ( (_) => DirSum ) }...
  )
}

class BlobSums (Str algo = '', Str vm = '', Str lib = '', Str boot = '') < SeriallyEquatable {
  has Hash serial_properties = [:algo, :vm, :lib, :boot].map{ ( (_) => Str ) }.to_h
  method =~ (other) { self._serial_eq(other, exclude_props: [:boot]) }
}

class VirtualBase64Blob (Str data = '', Str algo = '', Str sum ='') < SeriallyEquatable {
  has Hash serial_properties = [:data, :algo, :sum].map{ ( (_) => Str ) }.to_h
}

class TimeSpec < SeriallyAccessible {
  has Hash serial_properties = [:created, :modified, :accessed, :tombstoned].map { ( (_) => Num ) }.to_h
}

class BuiltObj << Lockable, SeriallyAccessible {
  # has Array init_steps_serial_propgen = [...]
  has Array _blob_targets = [:vm, :lib, :image, :boot]
  has Hash serial_properties = Hash(
    :id => Str,
    :factor_version => Str,
    :is_git => Bool,
    :git_branch => Str,
    :git_hash => Str,

    :os_type => Str,
    :os_name => Str,
    :arch_name => Str,
    :word_size => Str,

    :stored_boot_image => VirtualBase64Blob,
    :src_sums => SrcSums,
    :blob_sums => BlobSums,
    :blob_algorithm => [Str, :sha256, Hash(
      :get => {
        .blob_sums.algo || *TypeUtils::object_hash_ref([:custom_getter], _, :_blob_algorithm)
      }
    ) ], # default: sha256

    :timespec => TimeSpec,
  )

  # going to generate accessors instead of naming them
  # note the lack of def_method in the block; this simply arbitrarily
  #   extends the serial_properties hash to make new accessors
  #
  # all same length and support platform-prefixes
  # vm_format, etc
  has Array serial_property_generator_builtobj = [ {
    ._blob_targets.map{
      ( (_ + :_format) => Array)
    }.to_h
  }, { Hash(:junk => Number) } ]

  # these are not accessors, just methods that glue accessed values together
  # create boot_fullname etc
  has Array init_steps_builtobj = [ {
    ._blob_targets.each{
        |name|
      const name_format = name+:_format
      func gen (self) -> File {
        File( String( self.method(name_format)[0, 1] ) + self.id + self.method(name_format)[2] )
      }
      __CLASS__.def_method(name + :_fullname, gen)
    }
  } ]

  # next step: code generation for these methods too, by a special _extra_init_blocks
  #   property that get invoked at the end of init() to generate these methods
  # want a version of insert that doesn't change its object unless ! is used
  # -> vm_fullname ()    -> File { File( "#{self.vm_format[0, 1]}#{self.id}#{self.vm_format[2]}" ) }
  # -> image_fullname () -> File { File( "#{self.image_format[0, 1]}#{self.id}#{self.image_format[2]}" ) }
  # -> lib_fullname ()   -> File { File( "#{self.lib_format[0, 1]}#{self.id}#{self.lib_format[2]}" ) }
  # -> boot_fullname ()  -> File { File( "#{self.boot_format[0, 1]}#{self.id}#{self.boot_format[2]}" ) }
}
