#! sidef -vWkP8
# /usr/bin/env
#`(exit the shell) {
  eval 'exec sidef -WkP8 $0 ${1+"$@"}'
}

##  MultiFactor, meta build system for Factor core development
##    Copyright Cat Stevens 2018
##  This program is free software: you can redistribute it and/or modify
##    it under the terms of the GNU General Public License as published by
##    the Free Software Foundation, either version 3 of the License, or
##    (at your option) any later version.
##
##    This program is distributed in the hope that it will be useful,
##    but WITHOUT ANY WARRANTY; without even the implied warranty of
##    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##    GNU General Public License for more details.
##
##    You should have received a copy of the GNU General Public License
##    along with this program.  If not, see <https://www.gnu.org/licenses/>.
class Object {
  method cleave (*blocks) {
    blocks.map{ .run(self) }...
  }
  method ifold (*bv_pairs) {
    bv_pairs.map{ |p| p.first.run( self, @(p.second)... ) }...
  }
}

include argparse
include shell_words

define Hash SCRIPT = :(
  "version" => "0.3",
  "name" => "multifactor",
  "doc" => "a meta build system for Factor core development",
  "bug" => "github.com/catb0t/multifactor/issues",
  "license" => "GPL v3+"
)

# basic variable definitions for working with Factor from a high-level perspective
module Factor {
  const String RC_FILE = Dir.home+%f(.factor-rc)

  func find_config (name) {
    const regex = Regex("^! multifactor:#{name} (.*)")
    File(RC_FILE).open_r.lines.each {
      with ( .match(regex)[0] ) { return _ }
    }
    die "Config 'multifactor:#{name}' not found in #{Factor::RC_FILE}"
  }

  const Dir REPO = Dir(find_config("repo"))
  const Regex VERSION_REGEX = /VERSION = ([0-9]+\.[0-9]+)/
  const String VERSION = (
    VERSION_REGEX =~ (
      REPO + %f(GNUmakefile)->open_r.lines.find { |l| l ~~ VERSION_REGEX }
    )
  )[0]
}

module MultiFactor {
  # accessors are a necessity
  class BuiltObj (
    String _id,                     # long uuid
    String _git_branch,             # branch to which this applies
    String _git_hash,               # hash it's from; git rev-parse HEAD
    String _os_type,                # target os kind
    String _os_name,                # specific os string
    String _arch_name,              # x86 / ppc / arm ...
    String _word_size,              # 32 / 64
    String _sum_vm_names,           # a sha256 checksum
    String _sum_vm_contents,        # .
    String _sum_image_names,        # .
    String _sum_image_contents,     # .
    String _vm_blob_sum,            # .
    String _image_blob_sum,         # .
    String _time_created,           # epoch timestamp
    String _time_mod_access,        # 2 timestamps in the form "xxx/yyy"
    String _time_tombstoned = :never, # for once-existing now-deleted images; stores deletion time
    String _vm_base_name = :factor, # usually "factor"
    String _image_ext = '.image',   # usually ".image"
    String _sum_algorithm = :sha256, # usually sha256
    Bool   _lk = false,              # object locking
    String _failwrite = 'attempted writing to locked BuiltObj object!'
  ) {
    -> lock () -> BuiltObj { self._lk = true; self }
    -> unlock () -> BuiltObj { self._lk = false; self }
    -> id () -> Str { self._id }
    -> git_branch () -> Str { self._git_branch }
    -> git_hash () -> Str { self._git_hash }
    -> os_type () -> Str { self._os_type }
    -> os_name () -> Str { self._os_name }
    -> arch_name () -> Str { self._arch_name }
    -> word_size () -> Str { self._arch_name }
    -> sum_vm_names () -> Str { self._sum_vm_names }
    -> sum_vm_contents () -> Str { self._sum_vm_contents }
    -> sum_image_names () -> Str { self._sum_image_names }
    -> sum_image_contents () -> Str { self._sum_image_contents }
    -> vm_blob_sum () -> Str { self._vm_blob_sum }
    -> image_blob_sum () -> Str { self._image_blob_sum }
    -> vm_base_name () -> Str { self._vm_base_name }
    -> image_ext () -> Str { self._image_ext }
    -> time_created () -> Str { self._time_created }
    -> time_mod_access () -> Str { self._time_mod_access }
    -> time_tombstoned () -> Str { self._time_tombstoned }

    -> id (Str id)                { die _failwrite if (self._lk); self._id = id               ; self }
    -> git_branch (Str gb)        { die _failwrite if (self._lk); self._git_branch = gb       ; self }
    -> git_hash (Str hs)          { die _failwrite if (self._lk); self._git_hash = hs         ; self }
    -> os_type (Str os)           { die _failwrite if (self._lk); self._os_type = os          ; self }
    -> os_name (Str os)           { die _failwrite if (self._lk); self._os_name = os          ; self }
    -> arch_name (Str an)         { die _failwrite if (self._lk); self._arch_name = an        ; self }
    -> word_size (Str ws)         { die _failwrite if (self._lk); self._word_size = ws        ; self }
    -> sum_vm_names (Str x)       { die _failwrite if (self._lk); self._sum_vm_names = x      ; self }
    -> sum_vm_contents (Str x)    { die _failwrite if (self._lk); self._sum_vm_contents = x   ; self }
    -> sum_image_names (Str x)    { die _failwrite if (self._lk); self._sum_image_names = x   ; self }
    -> sum_image_contents (Str x) { die _failwrite if (self._lk); self._sum_image_contents = x; self }
    -> vm_blob_sum (Str x)        { die _failwrite if (self._lk); self._vm_blob_sum = x       ; self }
    -> image_blob_sum (Str x)     { die _failwrite if (self._lk); self._image_blob_sum = x    ; self }
    -> vm_base_name (Str x)       { die _failwrite if (self._lk); self._vm_base_name = x      ; self }
    -> image_ext (Str x)          { die _failwrite if (self._lk); self._image_ext = x         ; self }
    -> time_created (Str x)       { die _failwrite if (self._lk); self._time_created = x      ; self }
    -> time_mod_access (Str x)    { die _failwrite if (self._lk); self._time_mod_access = x   ; self }
    -> time_tombstoned (Str x)    { die _failwrite if (self._lk); self._time_tombstoned = x   ; self }
  }

  include Factor
  include FactorBashStateless

  define String temp_read_ext = "\.tmp_read"
  define String temp_write_ext = "\.tmp_write"

  -> temp_read_target (File name) is cached -> File {
    File(name + MultiFactor::temp_read_ext + FactorBashStateless::make_uuid() )
  }
  -> temp_write_target (File name) is cached -> File {
    File(name + MultiFactor::temp_write_ext + FactorBashStateless::make_uuid() )
  }

  # NOTE: NOT instance-specific, i.e doesn't use *OUR* UUID in name
  # this copies a file to a temporary for reading
  func temp_r (File name) -> File {
    die "Cannot stat #{name}" if (! name.exists)
    const File target = MultiFactor::temp_read_target(name)
    if (! name.copy(target) ) {
      die "Copy file #{name} to #{target}: failed, $!"
    }
    target
  }
  # this makes a temp file for writing, which can be rename()d over `name`
  func temp_w (File name) -> File {
    const File target = MultiFactor::temp_write_target(name)
    if (target.exists) {
      die "Create file #{target}: file exists"
    }
    target
  }
  # argument is used literally
  func finalise_temp_r (File target) {
    die "Cannot stat #{target}" if (! target.exists)
    if (! target.remove) {
      die "Can't remove #{target}: $!"
    }
  }
  # requires literal arguments due to UUID
  func finalise_temp_w (File name, File target) {
    die "Cannot stat #{target}" if (! target.exists)
    if (! target.mv(name)) {
      die "Can't move #{target} over #{name}: $!"
    }
  }

  # these are actually the interfaces to the above words
  # this returns a filehandle to in-memory string
  func atomic_read (File name) -> String {
    const File tmp = MultiFactor::temp_r(name)
    const tmp_fh = tmp.open_r
    const String contents = tmp_fh.slurp
    contents # won't be eagerly evaluated (will be nil) without this line
    # check error here?
    tmp_fh.close
    MultiFactor::finalise_temp_r(tmp)
    contents
  }
  func atomic_write (File name, String contents) {
    const File tmp = MultiFactor::temp_w(name)
    const tmp_fh = tmp.open_w
    const Bool res = tmp_fh.spurt(contents)
    if (! res) {
      die "Couldn't write #{contents.len} to #{tmp}: $!"
    }
    tmp_fh.close
    MultiFactor::finalise_temp_w(name, tmp)
    return nil
  }

  func _read_disk_db (File name) is cached -> Hash {
    # look for the database file
    # if it doesn't exist, stop
    # otherwise, open it
    const contents = MultiFactor::atomic_read(name)
    # if it's empty, get a new one -> []
    if (! contents) {
      return Hash()
    }
    const eval_contents = eval(contents)
    # if it's not empty, but contains invalid / throwing code, THAT's an error!
    if (! defined(eval_contents)) {
      die "Malformed db: #{name} (it failed to eval): #{contents}"
    }
    # if it contains only [], it's also empty -> []
    if (! eval_contents) {
      return Hash()
    }
    # if it contains [BuiltObj()...], it's nonempty -> [BuiltObj()...]
    eval_contents.values.all{_ ~~ BuiltObj} || die "Found garbage in #{name}: #{contents}"
    return eval_contents
  }

  func _write_disk_db (File name, Hash new_data) {
    const String new_contents = new_data.dump # safe ???
    # look for the database file
    # if it doesn't exist, stop
    # otherwise, open it
    MultiFactor::atomic_write(name, new_contents)
  }

  class Runtime (
    Hash options,
    Array factor_arguments
  ) {
    has Bool _config_setup_done = false # whether the following variables have been written
    has Str lock_ext = ".multifactor_lock"
    has Str lock_name

    has Bool force
    has Bool trace
    has Bool verbose
    has Bool info
    has Bool dry_run
    has Bool clean
    has Bool sums
    has Bool remove_old_lock

    # set in config file etc, not a cmdline option
    has Number sum_len

    # where the process started before any chdir
    has Dir initial_wd

    has Dir db_path
    has File db_name
    has File db

    has Dir factor_path
    has FactorBash fbash

    has String _UUID
    -> UUID () -> String { self._UUID }
    -> UUID (String u) -> MultiFactor::Runtime { self._UUID = u; self }

    -> _bn { File(__FILE__).basename.split(".")[0] }
    -> wrn (Num l, Str m, *args) { warn "[WARN]\t#{l}: #{m}: #{args.join(' ')}" }
    -> inf (Num l, Str m, *args) { say "[INFO]\t#{l}: #{m}: #{args.join(' ')}" }
    -> trc (Num l, Str m, *args) { say "[TRACE]\t#{l}: #{m}: #{args.join(' ')}" if (self.trace) }
    -> vbs (Num l, Str m, *args) { say "[VBOSE]\t#{l}: #{m}: #{args.join(' ')}" if (self.verbose) }
    # more verbose than trace ^^^

    method config_setup {
      if (! self._config_setup_done) {
        self.initial_wd = Dir.cwd

        self.db_name = File(self.options(){'db-name'})
        self.db_path = Dir(self.options(){'db-path'})
        self.db = self.db_path+self.db_name

        self.factor_path = Dir(self.options(){'factor-path'})
        self.fbash = shell_words::FactorBash(
          self.factor_path,
          subcommand_output: Bool( ! self.options\{'quiet-subcom'} )
        )
        self.UUID(FactorBashStateless::make_uuid())

        self.force = Bool(self.options\{:force})
        self.dry_run = Bool(self.options(){'dry-run'})
        self.verbose = ( Bool(self.options\{:verbose}) || self.dry_run )
        self.trace = Bool(self.options\{:trace} || self.dry_run || self.verbose)
        self.info = Bool(self.options\{:info})
        # self.fbash.subcommand_output = Bool( ! self.options\{'quiet-subcom'} ) # || self.trace || self.verbose)

        # TODO: argparse needs to
        # correctly fill out non-provided negatable booleans
        self.clean = Bool(self.options\{:clean})
        self.sums = Bool(self.options\{:sums})

        self.lock_name = File(self.db+self.lock_ext)


        self.remove_old_lock = Bool(self.options(){'remove-old-lock'})
        if (self.remove_old_lock) {
          self.wrn(__LINE__, __METHOD_NAME__, "!!!", "blindly removing old lockfiles (unsafe/debug) [--remove-old-lock | -R]")
          if (self.lock_name.exists) { self.lock_name.remove }
        }

        self._config_setup_done = true
        self.trc(__LINE__, __METHOD_NAME__, "finished configuration, wd now: '#{self.db_path}'")
      }
    }

    method show_info {
      self.config_setup
      say "MultiFactor #{self.UUID} options"
      say "\tverbose: #{self.verbose}\tinfo: #{self.info}\ttrace: #{self.trace}\tdry_run: #{self.dry_run}"
      say "\tclean: #{self.clean}\tsums: #{self.sums}\tdb_name: #{self.db_name}\tdb_path: #{self.db_path}"
      say "\tfactor_path: #{self.factor_path}\tdb: #{self.db}\tremove_old_lock: #{self.remove_old_lock}"
      say "\tFactor arguments: #{self.factor_arguments}"
    }

    method capture_write_disk (Block operation) {
      say "caller:"+Perl.eval("sub a { caller(1); }; sub b{ a() } my %data = (result => b()); \\%data")
      ...
      if (! self.dry_run) {
        self.vbs(__LINE__, __METHOD_NAME__, "writing disk with", 'operation')
        return operation.run
      }
      self.vbs(__LINE__, __METHOD_NAME__, "#not writing disk (dry run)")
      nil
    }

    method read_disk_db () is cached -> Hash {
      self.config_setup
      self.trc(__LINE__, __METHOD_NAME__, 'reading', self.db)

      MultiFactor::_read_disk_db(self.db)
    }

    method load_db () is cached -> Hash {
      self.vbs(__LINE__, __METHOD_NAME__, 'loading db...')
      static const db_data
      if (! defined(db_data)) {
        self.vbs(__LINE__, __METHOD_NAME__, 'wasn\'t cached!')
        db_data = self.read_disk_db
      }
      db_data
    }

    method write_disk_db (Hash new_data) {
      self.config_setup
      self.trc(__LINE__, __METHOD_NAME__, 'writing', self.db)

      if ( defined(new_data) && Bool(new_data) && new_data.values.all{_ ~~ BuiltObj} ) {
        self.capture_write_disk( { MultiFactor::_write_disk_db(self.db, new_data) } ) #, __METHOD_NAME__ )
      } else {
        self.cleanup_lock_file
        die "[ERROR]\t#{__METHOD_NAME__}: garbage argument #{new_data}"
      }
    }

    # TODO: don't write the disk right away
    method insert_disk_db (BuiltObj new_entry) {
      self.trc(__LINE__, __METHOD_NAME__, 'inserting', new_entry)
      const entire_db = self.load_db
      entire_db{new_entry.id} = new_entry
      self.write_disk_db( entire_db )
    }

    -> _test_lock_file (Bool cleanup) {
      const FileHandle first_line_fh = self.lock_name.open_r
      const String first_line = first_line_fh.readline
      first_line
      first_line_fh.close
      del first_line_fh
      # err on the side of caution
      die "[ERROR]\t#{__METHOD_NAME__}: malformed lockfile #{self.lock_name} exists and is empty\n\t(not removing; not continuing)" \
        if (! defined(first_line) || !first_line)
      if ( first_line.chomp != self.UUID ) {
        # otherwise, if the file is empty or lacks a UUID, it's not ours
        # we should die
        self.vbs(__LINE__, __METHOD_NAME__, 'UUID mismatch:', first_line.chomp.dump, '≠' self.UUID.dump)
        die (
          "[ERROR]\t#{__METHOD_NAME__}: lockfile #{self.lock_name} contains foreign UUID" +
          "\n\t(only one MultiFactor process should be active in a directory)"
          "\n\tnot removing it; not continuing"
        )
        # Sys.exit(136)
      } else {
        if (cleanup) { self.lock_name.remove }
        else {
          self.wrn(
            'my UUID already exists in the lockfile', self.lock_name,
            "\n\tUnnecessary read; MultiFactor bug found! in", Dir.cwd
          )
        }
      }
    }

    # NOTE: this ensures "we are a running process and we must be the only such running process"
    # different from the tmp_file implementation above
    # database "locking" should consist primarily in rename()
    # NOTE: NIH: want to avoid CPAN deps
    # not that anything on CPAN does what i want anyways
    method do_lock_file {
      self.config_setup

      die "[ERROR]\t#{__METHOD_NAME__}: empty dbname! lock_name was #{self.lock_name}" \
        if (self.lock_name.to_s == lock_ext)
      # if it doesn't exist, create it with our UUID
      if (! self.lock_name.exists) {
        const File fh = lock_name.create
        die "[ERROR]\t#{__METHOD_NAME__}: failed to create lockfile #{self.lock_name}: $!" \
          if (! defined(fh))
        fh.spurt(self.UUID)
        fh.close
        self.vbs(__LINE__, __METHOD_NAME__, "created #{self.lock_name}")
      } else {
        # otherwise, and if the contained UUID is ours, it must be ours (right?)
        # do nothing, but warn
        self._test_lock_file(false)
      }
    }

    method cleanup_lock_file {
      const MN = __METHOD_NAME__
      self.config_setup
      if (! self.lock_name.exists) {
        self.wrn(__LINE__, MN, 'Cannot stat', self.lock_name)
      } else {
        self.vbs(__LINE__, MN, 'removing', self.lock_name)
        self._test_lock_file(true)
      }
    }

    -> compile_vm (File vm_name) -> Bool {
      if ( ! self.fbash.build_factor(vm_name) ) {
        self.cleanup_lock_file
        die "vm compilation failed!"
      }
      true
    }

    -> compile_image (File vm_name, File image_name) -> Bool {
      if (! self.fbash.build_image(vm_name, image_name) ) {
        self.cleanup_lock_file
        die "image compilation failed!"
      }
      true
    }

    # multifactor's actual entry point
    # TODO: make this asynchronous, so that with_directory stuff is
    # done in a separate actor and awaited

    # TODO: read mtimes
    # TODO: write mtime/atimes
    # TODO: testability
    # TODO: if branches
    # TODO: make use of git information
    # TODO: compare OS, ARCH, WORD SIZE information
    # TODO: image compression?
    method go {
      const MN = __METHOD_NAME__
      self.config_setup
      if (self.info) { self.show_info; return nil }

      self.do_lock_file

      const (
        vm_sums = self.fbash.sum_vm_source,
        image_sums = self.fbash.sum_image_source
      )
      # say "vm: #{vm_sums}"
      # say "image: #{image_sums}"

      const db_data = self.load_db
      const builtobj_matching_source = db_data.values.find{
          |b|
        (
             (b.sum_vm_contents     == vm_sums{:contents}) \
          && (b.sum_vm_names        == vm_sums{:names}) \
          && (b.sum_image_contents  == image_sums{:contents}) \
          && (b.sum_image_names     == image_sums{:names}) \
        )
      }
      if (! defined(builtobj_matching_source)) {
        say '!!! no match'
        ...
        # need to generate new ID and compile
        self.cleanup_lock_file
        return nil
      }
      builtobj_matching_source.lock
      if (builtobj_matching_source.time_tombstoned != "never") {
        say '!!! matching entry is tombstoned!'
        ...
        # need to generate new ID and compile
        self.cleanup_lock_file
        return nil
      }

      self.vbs(__LINE__, MN, 'matching object in db')
      const String matching_blobs_name = builtobj_matching_source.id
      const (
        # could do %f( File().abs ) but that would break a concern separation
        # note: ignoring BuiltObj.vm_base_name here because it doesn't make any sense
        matching_vm_name = self.fbash.wd+File("#{matching_blobs_name}"),
        matching_image_name = self.fbash.wd+File("#{matching_blobs_name}#{builtobj_matching_source.image_ext}")
      )

      const Hash newly_compiled = :(
        :vm => if (! (self.fbash.wd + matching_vm_name -> exists) ) {
          self.trc(__LINE__, MN, "vm named '#{matching_vm_name}' doesn't exist: compiling")
          self.compile_vm(matching_vm_name)
        },

        :image => if (! (self.fbash.wd + matching_image_name -> exists) ) {
          self.trc(__LINE__, MN, "image named '#{matching_image_name}' doesn't exist: compiling")
          self.compile_image(matching_vm_name, matching_image_name)
        }
      )

      # we know they exist now, so they are "disk files" not just "names linked to a hash"
      -> blob_file_contents_sum (File f) {
        self.fbash.wd + f->open_r.slurp.encode("utf8").sha256
      }
      const (
        disk_vm_sum = blob_file_contents_sum(matching_vm_name),
        disk_image_sum = blob_file_contents_sum(matching_image_name)
      )
      const (
        vm_blob_sums_match = (disk_vm_sum == builtobj_matching_source.vm_blob_sum),
        image_blob_sums_match = (disk_image_sum == builtobj_matching_source.image_blob_sum)
      )

      newly_compiled.merge(if (! (vm_blob_sums_match && image_blob_sums_match)) {
          # due to different compiler versions
        self.trc(__LINE__, MN, 'blob sums mismatch!')
        # ???
        Hash(
          :vm => newly_compiled{:vm} || if (! vm_blob_sums_match) {
            self.trc(__LINE__, MN, 'recompiling VM!')
            self.compile_vm(matching_vm_name)
          },
          :image => newly_compiled{:image} || if (! image_blob_sums_match) {
            self.trc(__LINE__, MN, 'recompiling image!')
            self.compile_image(matching_vm_name, matching_image_name)
          }
        )
      })
      # RE-CHECK BLOB HASHES HERE
      const (
        new_disk_vm_sum = blob_file_contents_sum(matching_vm_name),
        new_disk_image_sum = blob_file_contents_sum(matching_image_name)
      )
      const (
        new_vm_blob_sums_match = (new_disk_vm_sum == builtobj_matching_source.vm_blob_sum),
        new_image_blob_sums_match = (new_disk_image_sum == builtobj_matching_source.image_blob_sum),
      )
      # if they STILL don't match, delete the files + tombstone the entry and quit
      if (
            (! (new_vm_blob_sums_match || vm_blob_sums_match)) \
        &&  (! (new_image_blob_sums_match || image_blob_sums_match))
      ) {
        self.trc(__LINE__, MN, 'blob sums still mismatched!')
        const tombstone_builtobj = (builtobj_matching_source |> :dclone |> :unlock)
        del builtobj_matching_source
        tombstone_builtobj.time_tombstoned(Time |> :sec |> :to_s)

        self.insert_disk_db(tombstone_builtobj)
        self.capture_write_disk{ matching_vm_name.remove, matching_image_name.remove }
        self.cleanup_lock_file
        return nil
      }

      # OK, going to update the DB and run Factor

      # only updating the blob sums IFF the blob was newly compiled
      # otherwise, just update the mod/access times and run count
      const new_builtobj_matching = builtobj_matching_source.dclone
      if (newly_compiled{:vm}) {
        self.vbs(__LINE__, MN, 'writing memory BuiltObj because of the newly compiled VM')
        new_builtobj_matching.vm_blob_sum(new_disk_vm_sum)
      }
      if (newly_compiled{:image}) {
        self.vbs(__LINE__, MN, 'writing memory BuiltObj because of the newly compiled image')
        new_builtobj_matching.image_blob_sum(new_disk_image_sum)
      }

      const changed_db = if (builtobj_matching_source.dump != new_builtobj_matching.dump) {
        self.trc(__LINE__, MN, 'writing the new BuiltObj to disk db because it changed')
        self.insert_disk_db(new_builtobj_matching)
        true
      }

      # say "Eventual successful configuration!"
      # say "\tmatching_vm_name:\t'#{matching_vm_name}' # #{disk_vm_sum[0..10]}...\tmatching_image_name:\t'#{matching_image_name}' #{disk_image_sum[0..10]}..."
      # say "\tvm_sums_match:\t\t#{vm_blob_sums_match}/#{new_vm_blob_sums_match}"
      # say "\timage_sums_match:\t#{image_blob_sums_match}/#{new_image_blob_sums_match}"
      # say "\tchanged_db:\t\t#{changed_db}\t\t\tnewly_compiled: #{newly_compiled.to_s.chars.grep{|p|![\"\n\",' '].any{p==_} }.join}"
      self.trc(__LINE__, MN, "ok, running factor!")
      # say want_vm_sum
      # db.map { .word_size("64") }
      #say db.dump
      # no changes to disk yet, also haven't read from git yet
      # self.write_disk_db(db)

      self.cleanup_lock_file
      # don't segfault
      {
        self.inf(__LINE__, MN, 'Launching Factor: ', "'", matching_vm_name, self.factor_arguments..., "'")
        if (! self.fbash.with_directory{
          Command::spawn_se('./' + matching_vm_name, self.factor_arguments..., output: true)
        } ) {
          self.inf(__LINE__, MN, "Failed #{$!}")
        }
      }.thr.detach
    }
  }
}

define MICRO_MAGNITUDE = 1_000
func μsec { Time.micro*MICRO_MAGNITUDE }
func μsec (Number n) { Time.micro*MICRO_MAGNITUDE - n }

func main () {
  const μs = μsec()
  μs
  # say Factor::RC_FILE
  # say Factor::REPO
  # say Factor::VERSION
  # say Dir.cwd
  # say Dir.cwd
  # Dir.chdir(Factor::REPO)
  # say BuildSh::generate_make_targets()
  # say FactorBash::sum_git_names_matching(/\.s(?:m|f)/)
  # say FactorBash::sum_git_contents_matching(/\.s(?:m|f)/)
  # say MultiFactor::BuiltObj(([""] * 15)..., false ).dump.len

  const parser = argparse::ArgParse(ARGV) \
    .info(SCRIPT) \
    .option("force", "f", doc: "Force a rebuild in any case") \
    .option("trace", "t", doc: "Some debug tracing") \
    .option("verbose", "V", doc: "Verbose debug tracing") \
    .option("info", "i", doc: "Just show configuration information") \
    .option("dry-run", "n", doc: "Change no disk files") \
    .option("clean", "c", negate: "Always":"Never", doc: "'make clean'") \
    .option("sums", "s",  negate: "Always":"Never", doc: "use checksums") \
    # probably don't need this, or set it in config file
    # .option("sum-len", "l", param: "len":"12", doc: "Shorten checksums to this length") \
    .option("db-name", "D", param: "name":".multifactor.db", doc: "Custom database filename") \
    .option("db-path", "d", param: "path":".", doc: "Path to dir containing database") \
    .option("factor-path", "w", param: "path":".", doc: "Path to Factor working directory") \
    .option("remove-old-lock", "R", doc: "Blindly remove any old lock files (unsafe!)") \
    .option("quiet-subcom", "q", negate: "Never":"Always", doc: "show subcommand outputs") \
    .use_option_terminator("Further arguments are given to Factor") \
    # .use_stdin_file_arg \
    # .use_arg_list_terminator \
    # .ignore_unknowns \
    # .help_on_stderr \
    .arg("arg...", doc: "Arguments to the final Factor VM")

  var (opts, args, *_) = parser.go...
  # say "#{opts} #{args} #{_}"

  const r = MultiFactor::Runtime(opts, args.keys)

  # r.show_info()
  r.go()

  say "\n\tΔ#{μsec(μs)} ×1,000μ"
}

if (__FILE__ == __MAIN__) {
  main()
}
