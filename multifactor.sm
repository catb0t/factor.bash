#! ruby
#! sidef -vWkP8
#`(exit the shell) {
  eval 'exec sidef -WkP8 $0 ${1+"$@"}'
}
##  MultiFactor, meta build system for Factor core development
##    Copyright Cat Stevens 2018
##  This program is free software: you can redistribute it and/or modify
##    it under the terms of the GNU General Public License as published by
##    the Free Software Foundation, either version 3 of the License, or
##    (at your option) any later version.
##
##    This program is distributed in the hope that it will be useful,
##    but WITHOUT ANY WARRANTY; without even the implied warranty of
##    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##    GNU General Public License for more details.
##
##    You should have received a copy of the GNU General Public License
##    along with this program.  If not, see <https://www.gnu.org/licenses/>.

include sidefext::metatype

include lib::ABCs
include lib::msg_classes
include lib::feature
include lib::withdirectory

include providers::argparse
include providers::builtobj
include providers::cachedb
include providers::factorbash

define Hash SCRIPT = :(
  "version" => "0.3", # "
  "name" => "multifactor",
  "doc" => "a meta build system for Factor core development",
  "bug" => "github.com/catb0t/multifactor/issues",
  "license" => "GPL v3+"
)

# basic variable definitions for working with Factor from a high-level perspective
module Factor {

  define File RC_FILE = Dir.home+%f(.factor-rc)

  define Hash _config_lines_cache = []

  define Block rc_config_lines = func () -> Hash {
    Factor::_config_lines_cache[0] \\= Factor::RC_FILE.open_r.map{
      [ (.=~ /^! multifactor:(.+) ?(.*)/)[0, 1] ]
    }.grep.map{ _... }.to_h
  }

  define Block _config_cache = :()

  define Block find_config = func find_config (name, Bool must_exist = true) {
    Factor::_config_cache{name} \\= (Factor::rc_config_lines(){name} \\ do {
      must_exist && die "Required config '! multifactor:#{name}' not found in #{Factor::RC_FILE}"
      ''
    })
  }

  define Maybe::Maybe FACTOR_DIR = Maybe::MaybeDir(  Factor::find_config('factor-dir', false) )
  define Maybe::Maybe QUIET_PIPE = Maybe::MaybeBool( Factor::find_config('quiet-pipe', false) )
  define Maybe::Maybe DEFAULT_CHECKSUM = Maybe::MaybeStr(
    Factor::find_config('default-checksum', false) || Feature::DEFAULT_CHECKSUM
  )

  # ???
  define Block say_stderr = func (String color, *args) {
    if (STDOUT.is_on_tty || (!STDOUT.is_on_tty && !Maybe::unmaybe(Factor::QUIET_PIPE, { false }) ) ) {
      STDERR.autoflush(true)

      with ( Feature::ANSIColor ) {
        STDERR.say( .color('bold', color), args..., .RESET )
      }
    }
    # else, not a TTY and quiet-pipe is true
  }

  define Hash  TARGETS = :( :vm => true, :lib => true, :image => false )
  define Array CHECKSUMMED_TARGETS = [:vm, :lib]
}

module MultiFactor {

  include lib::shell_words

  include Factor
  include FactorBashStateless
  include GuardIO

  include sidefext::iterable
  import sidefext::iterable::ImmutableHash

  import lib::shell_words::BuildSh

  import builtobj::DirSum
  import builtobj::SrcSums
  import builtobj::BlobSums
  import builtobj::VirtualBase64Blob
  import builtobj::TimeSpec
  import builtobj::BuiltObj

  # historical interest
  # func compare_properties (Array properties, BuiltObj b, Object o, Bool debug = false) {
  #   if (debug) {
  #     properties.map{
  #         |property|
  #       const db_property = b.method(property)()
  #       const status_property = o{property}
  #       say "Property '#{property}': #{db_property == status_property}: #{db_property.dump} == #{status_property.dump}"
  #       db_property == status_property
  #     }.all
  #   } else {
  #     properties.map{ |prop| b.method(prop)() } ~Z== o{properties...} -> all
  #   }
  # }
  struct BlobStatus {
    Bool exists = false
    Bool recompiled = false
    Maybe::Maybe_Type checksum = Maybe::MaybeStr(nil)
  }

  func dump (BlobStatus b) {
    with (b) {
      "BlobStatus( exists: #{.exists}, recompiled: #{.recompiled}, checksum: #{Maybe::dump(.checksum)} )"
    }
  }

  struct AlgoBox {
    String blob
    String src
  }

  func absent_config (String rc_name, param_name = nil) {
    die "Absent config!\n\t'#{rc_name}' or '#{param_name \\ rc_name}' must be set in either the RC file ('! multifactor:#{rc_name} ...') or command line argument ('--#{param_name \\ rc_name}=...')!"
  }

  define Set _mfr_known_actions = Set('run-factor', 'env-info', 'src-sums', 'spoof-exists')

  define Array _mfr_spgr = [ {
    .field_groups.map{
      const tn =
      .second.map{ |k| ((k) => .first) }.to_h
    }.reduce('merge')
  } ]

  define Array _mfr_fg = [
    (Bool    ¦ [:force, :debug, :info, :dry_run, :spoof_build, :clean, :basis_dev]),
    (String  ¦ [:action, :uuid, :sum_algo]),
    (Dir     ¦ [:wd]),
  ]

  define Array _mfr_init = [ {
      |self|
    self.uuid( GuardIO::make_uuid(words: true) )
    say "MFRuntime: #{self.uuid}"
    self.wd( Dir.cwd )
    # need to use field_groups here
    Hash(
      :action => Block.identity,
      :sum_algo => String
    ).merge(
      [:force, :dry_run, :info, :clean, :basis_dev, :spoof_build] \
        .map{ ( (_) => Bool ) }.to_h # all these parentheses are important
    ).each_kv{
        |name, convert|
      self.method( name )( convert( self.options(){ name.replace_all("_", "-") } ) )
    }

    with (self.sum_algo || Maybe::unmaybe(Factor::DEFAULT_CHECKSUM, { absent_config('default-checksum', :sum_algo) }) ) {
      self.algos = AlgoBox( [ _ ]*2 ... )
    }

    const Dir factor_dir = Dir( with ( 'factor-dir' ) {
        self.options(){_} || Maybe::unmaybe(Factor::FACTOR_DIR, { absent_config(_) } )
    } )

    const Bool is_trace = ( [:trace, :verbose, 'dry-run'].any{ self.options(){_} } )
    const Bool is_verbose = ( [:verbose, 'dry-run'].any{ self.options(){_} } )
    const Bool subcommand_output = Bool( with ( self.options ) {
      .{'no-quiet-subcom'} || ( .{'quiet-subcom'} \\ Maybe::unmaybe(
        Factor::QUIET_PIPE,
        { absent_config('quiet-pipe', '[no-]quiet-subcom') }
      ) )
    } )
    # need a way for the consumer ofthe ArgParse API to know the exact syntax of the command line
    self.known_actions.contains(self.action) \
      || die "[FATAL] #{__FILE__, __LINE__}: init_steps_mfruntime: don\'t know action '#{self.action}' [--action | -a]"

    # initialise helper objects
    self.log = GuardIO::SLog( is_trace: is_trace, is_verbose: is_verbose, logger: Factor::say_stderr )

    self.fbash = providers::factorbash::FactorBash(
      factor_dir,
      self.algos.src,
      self.basis_dev,
      subcommand_output: subcommand_output,
      spoof_build: self.spoof_build
    )

    self.db_man = providers::cachedb::CacheDB().setup( :(
        :dir =>              self.options(){'db-dir'},
        :filename_base =>    self.options(){'db-name'},
        :dry_run =>          self.dry_run,
        :verbose =>          is_verbose,
        :trace =>            is_trace,
        :replace_existing => self.options(){'from-scratch'},
        :element_type =>     BuiltObj,
        # :logger => self.log # separate or same loggers?
    ) )

    self.locker = GuardIO::GlobLocker().setup( :(
      :uuid => self.uuid,
      :remove_old_lock => self.options(){'remove-old-lock'},
      :lock_ext => '.multifactor_lock',
      :locked_fods => [ self.db_man.db_name, self.fbash.wd ],
      :verbose => is_verbose,
      :trace => is_trace
    ) )

    self.log.trc(__FILE__, __LINE__, :init_steps_10_mfruntime, "finished configuration") #, wd now: '#{self.db_dir}'")
    self.locker.do_lock_files
  } ]

  class MFRuntime (Hash options, Array factor_arguments) << lib::ABCs::SeriallyAccessible, lib::withdirectory::CapturedWriter {

    has GuardIO::SLog                      log
    has providers::cachedb::CacheDB        db_man
    has GuardIO::GlobLocker                locker
    has providers::factorbash::FactorBash  fbash
    has AlgoBox                            algos

    # todo: collect generated methods that don't appear in .methods

    has Array known_actions = _mfr_known_actions
    has Array field_groups = _mfr_fg
    has Array serial_property_generator_mfruntime = _mfr_spgr
    has Array init_steps_10_mfruntime = _mfr_init

    method destroy (Bool is_exc, Hash exc_info, *rest) {
      say "~MFRuntime entry"
      const type = (is_exc && Combi::rescope( lib::msg_classes::classify( exc_info{:msg} ) )({
          |type, fields|
        self.log.wrn(__FILE__, __LINE__, __METHOD_NAME__, "#{__CLASS_NAME__}: destructor called!\n\t#{type} :: #{fields}\n") # .grep_kv{ .!= :block_tried_invoke }
        type
      }))
      [self.db_man, self.locker].map{ .destroy(is_exc, exc_info) }
      type
    }

    method show_info { ... }

    -> _blob_file_contents_sum (File f, Str algo) -> String {
      # self.log.vbs(__FILE__, __LINE__, __METHOD_NAME__, "checksumming #{f} with algorithm '#{algo}'")
      # give checksum of empty file, or die?
      self.spoof_build ? '(empty checksum)' : self.fbash.with_directory{
        (f.exists && BuildSh.blob_file_contents_sum(f, algo || self.algos.blob)) \
          || die "[FATAL] #{__METHOD_NAME__}: empty algo: file: #{f}"
      }
    }

    -> _compile_vm_lib (BuiltObj bo) {
      if ( ! self.fbash.build_factor(bo) ) {
        die "vm compilation failed!"
      }
      self.log.vbs(__FILE__, __LINE__, __METHOD_NAME__, "vm/lib compiled")
      true
    }

    # TODO:REWRITE
    -> compile_vm_lib (BuiltObj bo, String caller_name = "") -> Bool {
      if (caller_name == :maybe_recompile_target) {
        static var have_compiled = false
        if (! have_compiled) {
          self.log.vbs(__FILE__, __LINE__, __METHOD_NAME__, "vm/lib compiling for 1st time")
          self._compile_vm_lib(bo)
          have_compiled = true
        } else {
          self.log.vbs(__FILE__, __LINE__, __METHOD_NAME__, "vm/lib not recompiled: #{caller_name}: no double jeopardy")
        }
        true
      } else { self._compile_vm_lib(bo) }
    }
    -> compile_vm  (o, c) { self.compile_vm_lib(o, caller_name: c) }
    -> compile_lib (o, c) { self.compile_vm_lib(o, caller_name: c) }

    # TODO:REWRITE
    -> compile_image (BuiltObj bo) -> Bool {
      if (! self.fbash.build_image(bo) ) {
        die "image compilation failed!"
      }
      self.log.vbs(__FILE__, __LINE__, __METHOD_NAME__, "image compiled")
      true
    }

    # TODO:REWRITE
    # NOTE: modifies obj
    -> sum_save_boot_image (BuiltObj bo) {
      self.log.trc(__FILE__, __LINE__, __METHOD_NAME__, "saving boot image sums for #{bo.boot_fullname}")
      const disk_sum_toplevel = self._blob_file_contents_sum(bo.boot_fullname, bo.blob_algorithm)

      if ( disk_sum_toplevel != bo.blob_sums.boot ) {
        bo.blob_sums( BlobSums(
          algo: bo.blob_algorithm || self.algos.blob,
          boot: disk_sum_toplevel,
          # set the rest of the properties to their old values
          [:vm, :lib].map{
              |n|
            n ¦ bo.blob_sums.method(n)
          }...
        ))
      }

      const disk_sum_stored = self._blob_file_contents_sum(bo.boot_fullname, bo.stored_boot_image.algo)

      if ( disk_sum_stored != bo.stored_boot_image.sum ) {
        bo.stored_boot_image( VirtualBase64Blob(
          sum: disk_sum_stored,
          data: self.fbash.with_directory{ GuardIO::read_binary_b64(bo.boot_fullname) },
          algo: (bo.stored_boot_image.algo || bo.blob_algorithm || self.algos.blob)
        ) )
      }
    }

    # TODO:REWRITE
    # complex check for vm and lib
    # -> maybe_recompile_target (BuiltObj match_bo, BlobSums cur_blob_sums, String target, Hash previous_recompiled) { }

    -> _algo (BuiltObj prefer) is cached -> String { prefer.blob_algorithm || self.algos.blob }

    # TODO:REWRITE
    -> _make_disk_blob_sums (BuiltObj bo) -> BlobSums {
      BlobSums(
        # TODO: algo
        algo: self._algo(bo),
        self.fbash.with_directory{
          Factor::TARGETS.pairs.map{
            const name = _[0]
            const test = _[1]
            ( name ⫶ test && self._blob_file_contents_sum( bo.method(name + :_fullname)(), self._algo(bo) ) )
          }
        }...
      )
    }

    -> build_new_factor (BuiltObj current_status) {
      const MN = __METHOD_NAME__

      self.log.trc(__FILE__, __LINE__, MN, 'no match in db!')
      # interpret the current_status keys as property (setter) names in BuiltObj
      # this call does not set all properties, only those listed in status_properties
      current_status.dclone.unlock.id(self.uuid).timespec( TimeSpec().created(Time.now) ).cleave(
        { |n| self.compile_vm_lib(n) },
        { |n| self.compile_image(n)  },
        { |n| n.blob_sums( self._make_disk_blob_sums(n) ) },
        { |n| self.sum_save_boot_image(n) }, # modifies n
        { .lock },
        { self.log.trc(__FILE__, __LINE__, MN, 'writing the new BuiltObj to disk db because it changed') },
        { self.db_man.insert(_) },
        { self.log.trc(__FILE__, __LINE__, MN, "ok, running factor!") },
        { self._detach_factor_thread(_.vm_fullname) }
      )
    }


    -> _tombstone_entry (BuiltObj bo) {
      const tombstoning = (bo |> :dclone |> :unlock)
      del bo
      tombstoning.timespec.tombstoned(Time.now)

      self.db_man.insert(tombstoning)
      self.capture_write_disk(__METHOD_NAME__, { Factor::TARGETS.keys.each{ tombstoning.method(_ + :_fullname)().remove } } )
    }

    -> update_existing_factor (BuiltObj bo, BuiltObj current_status, Bool is_restart: true) {
      const MN = __METHOD_NAME__

      func checksum (String tgt, LazyMethod tgt_fullname) -> Maybe::Maybe_Type {
        self.fbash.with_directory{
          self._blob_file_contents_sum( tgt_fullname(), self._algo(bo) )
        }.rescope{
            |disk_sum|
          Maybe::MaybeStr( current_status.rescope{
            [ ::eq( .blob_algorithm        self._algo(bo) )
              ::eq( .blob_sums.method(tgt) disk_sum       ) ].all||self.spoof_build
          } ? disk_sum : nil )
        }
      }
      func new_vm_lib () -> Block {
        func () -> (BlobStatus, BlobStatus) {
          self.compile_vm_lib(bo, MN).rescope{
              |s|
            Factor::CHECKSUMMED_TARGETS.map{ BlobStatus( exists: s, recompiled: s,
                checksum: checksum( _, bo.method(_ + :_fullname) )
            ) }...
          }
        }
      }
      func need_recompile ( BlobStatus _ ) -> Bool { .exists || (true != Maybe::unmaybe( .checksum )) }

      # if either the vm or lib are missing or out of date, recompile them
      #   if the checksums don't match after both have been recompiled, stop
      const Hash blob_stats = Factor::TARGETS.map_kv{
          |k, v|
        const LazyMethod target_fullname = bo.method( k + :_fullname )
        # say "target_fullname class: #{target_fullname.class}"
        (target_fullname.exists || self.spoof_build).rescope{
          # const new_v =
          # say "k: #{k} e: #{e} v: #{v}"
          ( (k) => BlobStatus(
            exists:     _,
            recompiled: false,
            checksum:   Maybe::MaybeStr( (v && _) ? checksum( k, target_fullname ) : nil )
          ) )
        }
      }

      if (need_recompile( blob_stats{:vm} )) {
        blob_stats{Factor::CHECKSUMMED_TARGETS...} = (new_vm_lib()())
      }

      # NOTE: compiling only the lib can be done in parallel with the next step
      const lib_thread = (need_recompile(blob_stats{:lib}) ? new_vm_lib() : {}).ffork

      # next, if the image is missing, rebuild it
      if (blob_stats{:image}.exists.neg || self.spoof_build) {
        blob_stats{:image} = BlobStatus(
          exists:     self.compile_image(bo),
          recompiled: true
        )
      }

      # don't update the database's blob sums if the blob wasn't recompiled

      blob_stats{Factor::CHECKSUMMED_TARGETS...} = (lib_thread.wait)
      const disk_blob_sums = BlobSums(
        algo: self._algo(bo),
        blob_stats-:(:image) -> pairs.map{
          .first ⫶ Maybe::unmaybe( .second.checksum )
        }...
      )

      # self.log.vbs(__FILE__, __LINE__, MN, "NOTE: TWICE: #{new_recompiled}")
      self.log.trc(__FILE__, __LINE__, MN, "done calculating checksums / rebuilding")

      # if they STILL don't match, delete the files + tombstone the entry and quit
      if ( (bo.blob_sums !~ disk_blob_sums) && (!self.spoof_build) ) {
        self.log.trc(__FILE__, __LINE__, MN, 'blob sums still mismatched!')
        return if (is_restart) {
          self.log.wrn(__FILE__, __LINE__, MN, "i give up (already in a restart)")
          false
        } else {
          self.log.wrn(__FILE__, __LINE__, MN, "starting over...")
          self._tombstone_entry(bo)
          __METHOD__(is_restart: true)
        }
      }

      # TODO: audit this logic
      # going to make a new updated BuiltObj from match_bo
      const new_bo = bo.cleave( { .lock }, { .dclone.unlock } ).last
      if ( blob_stats.values.any{ .recompiled } ) {
        self.log.vbs(__FILE__, __LINE__, MN, 'writing memory BuiltObj because of recompiled objects')
        new_bo.blob_sums(disk_blob_sums)
        new_bo.timespec.modified(Time.now)
      }
      new_bo.lock
      if (new_bo != bo) {
        self.log.trc(__FILE__, __LINE__, MN, 'committing changed BuiltObj')
        self.db_man.change( new_bo.id(self.uuid) )
      }
      # and then run Factor
      self.log.trc(__FILE__, __LINE__, MN, "ok, running factor!")
      self._detach_factor_thread( new_bo.vm_fullname )
    }
    # multifactor's actual entry point
    # FAR AWAY TODO: make this asynchronous, so that with_directory stuff is
    # done in a separate actor and awaited

    # TODO: dynamic hash algo selection
    # TODO: read mtimes
    # TODO: test whether the images are older than the file mtimes?!
    # TODO: write mtime/atimes
    # TODO: testability
    # TODO: image compression?

    # still needs a rewrite
    method go {
      const MN = __METHOD_NAME__
      if (! Set('run-factor', 'spoof-exists').has(self.action)) {
        given (self.action) {
          when ('src-sums') { self.fbash.say_src_sums }
          when ('env-info') { self.fbash.say_env_info }
          when ('class-info') { self.show_info }
        }
        return ()
      }

      const spoof_exists = self.action=='spoof-exists'

      # property names in BuiltObj, used to create current_status
      # BuildSh and FactorBash implement these through FactorBash.delegate
      define Set status_properties = Set(
        :factor_version, :is_git, :git_branch, :git_hash,
        :os_type, :os_name, :arch_name, :word_size,
        :vm_format, :image_format, :lib_format, :boot_format,
        :blob_algorithm, :src_sums
      )
      var BuiltObj current_status = BuiltObj().blob_algorithm( self.algos.blob )
      status_properties.each{
        with ( self.fbash.delegate( _ ) ) { |v| current_status.method( _ )( v ) }
      }
      current_status.lock
      # if (self.debug) { #say current_status.dump #say db_data.dump }

      const match_bo = (self.db_man.data.values.find{
          |b|
        # remember, we're not testing *all* properties like .lock or tombstoned
        current_status._serial_eq(b, incl: status_properties)
      } \\> :lock)

      with (match_bo \\ ( spoof_exists ? current_status : nil )) {
          |mb|
        self.cleave(
          ( (!Set(:never, 0, nil).has( mb.timespec.tombstoned ) && !spoof_exists)
            ? ( { ._tombstone_entry(mb) }
                { .build_new_factor(current_status) } )
            : ( { .log.vbs(__FILE__, __LINE__, MN, 'matching object in db') }
                { .update_existing_factor(mb, current_status) } ) )
        ).last
      } else {
        say '!!! build new factor!'
        self.build_new_factor(current_status)
      }
    }

    -> _detach_factor_thread (String vm_name) {
      const MN = __METHOD_NAME__
      {
        self.log.inf(__FILE__, __LINE__, MN, 'Launching Factor: ', "'", vm_name, self.factor_arguments..., "'")
        if ( self.fbash.with_directory{
            Command::spawn_se('./' + vm_name, self.factor_arguments..., output: false)
        } ) {
          self.log.wrn(__FILE__, __LINE__, MN, "Failed!")
        }
      }.thr.detach
      # don't segfault
    }
  }
}

define MICRO_MAGNITUDE = 1_000
func μsec { Time.micro*MICRO_MAGNITUDE }
func μsec (Number n) { Time.micro*MICRO_MAGNITUDE - n }

func main {
  const μs = μsec()
  μs
  # say Factor::RC_FILE
  # say Factor::REPO
  # say Factor::VERSION
  # say Dir.cwd
  # say Dir.cwd
  # Dir.chdir(Factor::REPO)
  # say BuildSh::generate_make_targets()
  # say FactorBash::sum_git_names_matching(/\.s(?:m|f)/)
  # say FactorBash::sum_git_contents_matching(/\.s(?:m|f)/)
  # say MultiFactor::BuiltObj(([""] * 15)..., false ).dump.len

  const parser = providers::argparse::ArgParse(ARGV) \
    .info(SCRIPT) \
    .option(:force, :f, doc: 'Force a rebuild in any case') \
    .option(:trace, :t, doc: 'Some debug tracing') \
    .option(:verbose, :V, doc: 'Verbose debug tracing') \
    .option(:info, :i, doc: 'Just show configuration information') \
    .option('dry-run', :n, doc: 'Change no disk files') \
    .option('from-scratch', :g, doc: 'ignore existing DB (debug)') \
    # .option('sums', :c,  negate: (:Always ¦ :Never), doc: 'use checksums') \
    # TODO
    .option('sum-algo', :k,  param: (:algo ¦ :sha256), doc: 'Checksum algorithm to use') \

    .option('db-name', :D, param: (:name ¦ '.multifactor.db'), doc: 'Custom database filename') \
    .option('db-dir', :d, param: (:dir ¦ '.'), doc: 'Directory containing database') \
    .option('factor-dir', :w, param: (:dir ¦ "."), doc: 'Path to Factor working directory') \
    .option('remove-old-lock', :R, doc: 'Blindly remove any lock files (unsafe!)') \
    .option('quiet-subcom', :q, negate: (:Never ¦ :Always), doc: 'show subcommand outputs') \
    # TODO: argparse can accept a list of allowed values
    .option(
      :action, :a, param: (:name ¦ 'run-factor'),
      doc: "Perform this action\nactions: run-factor, src-sums, env-info"
    ) \
    .option('basis-dev', :b, doc: "Ignore changes in basis/\n(basis development mode)") \
    .option('spoof-build', :s, doc: "Don't actually compile or build anything") \
    .use_option_terminator('Further arguments are given to Factor') \
    # .use_stdin_file_arg \
    # .use_arg_list_terminator \
    # .ignore_unknowns \
    # .help_on_stderr \
    .arg("arg...", doc: "Arguments to the final Factor VM")

  var (opts, args, *_) = parser.go...
  # say "#{opts} #{args} #{_}"

  const destroy_mf = Combi::FinalizerSpec(
    obj: MultiFactor::MFRuntime(opts, args.keys).debug(true),
    shared_f7rs: [[:destroy]],
    exc_only: false
  )

  const done = Combi::with_destructors( destroy_mf )({
    .go
  })
  # say Combi::dump(done)
  with (done) {
   if (!.success) {
     Combi::rescope( lib::msg_classes::classify( .{:exc_info}{:msg} ) )({
         |type, fields|
       Factor::say_stderr('red', "~MFRuntime called due to runtime error: #{type} :: #{fields.grep_kv{ .!~ /_tried_invoke/ }}\n") #
     })
     # #{Combi::dump(_)}
   }
  }

  Factor::say_stderr('bold bright_white', "\n\tΔ#{μsec(μs)} ×1,000μ")
}

if (__FILE__ == __MAIN__) {
  with ( Feature::ANSIColor ) {
    say ( .color('bright_green'), SCRIPT{:name}, ' entrypoint main()', .RESET)
  }
  main()
}
